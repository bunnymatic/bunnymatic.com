%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (george g rat) ( )
%%Title: (Ouch.ai)
%%CreationDate: (2/28/2002) (10:08 AM)
%%BoundingBox: 5 5 52 109
%%HiResBoundingBox: 5.2939 5 51.6006 108.0376
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Black&White
%AI7_ImageSettings: 0
%%CMYKCustomColor: 0.05 0.89 0.8 0.2 (Apple Red)
%%+ 1 1 0 0 (Beautiful Blue)
%%+ 0 0 1 0 (Bright Yellow)
%%+ 0 1 1 0 (Fire Engine Red)
%%+ 1 0 1 0.49 (Gladstone Green)
%%+ 0.49 0 0.49 0 (Lime Green)
%%+ 0.25 0.25 0.25 0 (Medium Process Gray)
%%+ 0 0.29 0.8 0 (Orange Juice)
%%+ 0.05 1 0.05 0.05 (Popular Purple)
%%+ 0.05 0.49 0.2 0 (Pretty Pink)
%%+ 0.05 0.05 1 0.29 (Ripe Banana)
%%+ 0.09 1 1 0.2 (Rose Red)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 27 56 27 56
%AI3_TileBox: -10 -5 582 739
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 4
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -172.5 351.5 1 792 507 18 0 1 110 97 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-10 -5
%%AI3_PaperRect:-8 784 604 -8
%%AI3_Margin:8 -40 -9 8
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 60 128 8
%%BeginData: 6914 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD29FF7DF8F87DFD37FFA8A852F827FD3AFFF827FD37FF7DFFFF52
%52FD37FF7DFD3BFF527D7DFDFCFFFD21FFA87D522752A8FD08FF7DFD2DFF
%7DA827A8FD09FF7DA8FD1AFFA8FFFF7D277DFD1AFFF8A8FD17FFA852F8F8
%7DFF7DF8F8F852FD0DFF7DFD09FF7DF85252FD15FFA827F852A8FD04FF52
%F8F827FD0CFF52FD09FF527DFF27A8FD13FFA8F8F8A8FD06FF27FD04F8FD
%0BFF277DFD07FFA87DFFFF7DF87DA8FD11FF52F8A85252FD04FF7DF8F8F8
%7D2727FD0BFF7DFD0CFFA8FD12FFA8F852FF27F827FF52FD05F8FF7DF87D
%FD2AFF5227A8FF52F8F8FFFD06F8FFFF277DFD2AFF2727FFFF7DF8F852F8
%F827F8F8F8FFFFA827FD13FFA8A8FD15FF277DFFFF7DF8F8A8F8F85227F8
%F8FFFFA827FD13FF52F8FD15FF277DFFFFA8F8F87DF8F87D52F8F8FFFFA8
%F8FD07FFA8A8FD0AFFF8F827FF52F87DFD10FF277DFFFFA8F8F8FF27F827
%7DF8F8FFFF7D27FD07FFA8A8FD0AFF52F827FFFFA852FD10FF52F8FFFFFF
%F8F8FF52F85252F8F8FFFF2727FD07FF7DA8FD0AFF7D27A8FFFFFF27FD10
%FF7DF852FFA8F87DFFA827A8A8F8F8FFA8F8A8FD07FFA8A8FD09FFA8277D
%FFFF52F8F8FD11FFF8F8A87D52FD06FFF8F8A82727FD08FFA87DFFFFA8A8
%FD06FF7D7DFFA8F8F827A8FD10FFA8F827FD08FFA827F827A8FD09FF527D
%FFA8FD20FF7DF8F87DFD06FF7DF8F8A8FD30FF52F8277D527D5227F852FD
%33FFA87DF8F8F85252FD4AFF7DFD0CFF52A8FD2CFF7DF827FD0BFF27FD2D
%FF7DF8A8FD0AFFA852FD3AFF52F87DA8FD38FFF8A8FF52FD37FF7DFFFFFF
%52A8FD2EFFA8A8FDFCFFFDFCFFFDFCFFFDC5FFA8A8FD38FFA827F8F8A8FD
%36FFA8FD04F8A8FD2BFF2752FD08FFA8FD05F8A8FD2BFFF8F852FD07FF27
%FD05F8FD2CFFF8F8F8A8FF2752FFFF7DFD06F8FD29FFA8FFFF277DF82727
%F827FFFF52FD06F827FD09FF7D522727F8F8F85252A8FD14FF52F827A827
%7D52F852F827FFA8FD08F852FD05FF7D27F852527DFD07F852FD13FF7DF8
%F827F8A8FF7DFF52F8A852FD08F827A8FFFFFF272752FD04FF52F8522752
%F8F8F852FD13FFFD04F87DFFFFFF7DFD0DF8527DF8F827A87DA8A85227FF
%FFFFA82752A8F852FD12FF52F8FD07FF5227FD15F8A8FFFFFF52A8FFFF7D
%F87DFD10FFA827F827FD07FF27FD16F87DA82752FFFFFFA8F8F8A8FD0EFF
%A8F8F8F87DFD07FF272752FD17F8FD05FFF8F8F8FD0EFF52F8A8FD09FFF8
%27A827FD15F827FD04FF7DF827F827FD0DFFA8F852FD09FF5227FFA8FD16
%F87DFFFFFF277DFFF8F8A8FD0EFF27F852A8FD06FF7D27FFFF52FD16F87D
%FFA827FFFF27F852FD0FFFA87D272752FD05FFF8A8FF7DFD19F8A8FFFFF8
%27F8FD12FFA8277DFD04FF7DF827F827FD17F8277DFFFFF852277DFD12FF
%A827A8FD04FF27F8A8FFFF5227FD17F827F8A82752FD13FFA827A8FFFFFF
%27A8FD04FFA852FD18F8FF2727FD14FF5252FFFFFF7DFD05FFA8A8A8FD05
%F8522752275227FD07F827FF27F8277DF852FD15FFF8A8FFFFA8FD05FF7D
%27F82752FD0AFF5227FFF8F8F87DFFFD05F827FD15FF7DF8A827FD08FFA8
%F8F82752527D527D7DFFFFFFA827FF7DF8F8FFFFF8F8277DF852FD16FF27
%F827FD06FF7D7D27FD07F8277DFD04FFF87DA8F852FFA8F827FF27F852FD
%0BFFA8FD0AFF52F852FD05FF7DFD04A87D5227F8FD08FF7D27FD05FFA8FF
%52F8F852FD09FFA8F8F8F852FD09FFF87DFD0DFF7D27FD07FF7DF8A8FD06
%FFFD04F87DFD08FF27FD05F8525227A8FD04FF5252FD0FFF27FD07FFF8A8
%FD06FFA8A82727FD09FFF8F8F85227F8F87D27F8A8FFFFFF7D27FD08FF27
%7DA8FD04FFA87DFD06FFF87DFD07FF52F852FD08FFA8F8F87DFFFFF82727
%52F827A8FFFFFF27FD07FF52525227277DFD0AFF27A8FD06FF7DF8F87DFD
%08FFA8F8F8A8FF52FD06F852FFFFFF7D7DFD06FF27A8FFFFA827277DFD08
%FF27A8FD07FF27F852FD08FFA8F8F8A87DFD08F8FFFFFFA852FD06FFF8A8
%FD04FF7D277DFD07FF27FD06FFA827F8F87DFD09FF52FD06F8A827F8F8F8
%7DFFFFFF7D27A8FD04FF2727FD05FFA8F87DFD06FF27FD06FFF82752A8FD
%05FF52F8F852527DA87DF8F8F852FF27F852F8FD05FF2727FD04FFA8F87D
%FD05FF7D27FD06FFF8FD05FF5227FD07FF7DFD05F827FFFFFF27F827A8F8
%277DF8FD06FF27F87DFFFFFF7DF852FD05FFF87DFD04FFA8F8FD04FFA827
%A8FD07FF27FD05F827A8FFFFFF27F827F87D5227FD07FF27F827A8FFFF7D
%272752A8FFA82752FD04FF7DF8FD04FFA852FD08FFF8F8F827FD04F852FF
%FFFFF8F852A8F8A8FD08FF52F8F82752A8A87DFD04F852FD05FFF8F852FF
%FFFF52A8FD08FFF8F8F87DFD05F827A8A82752FFF87DFD0AFFA852FD04F8
%2727F852A8FD05FF52A852277DFFFF7DFD09FF52F8F827F8F8F8A8A827F8
%2727FF2727FD0CFF7DF8A827FD05F85252A87D7D2752FFFFA852F82727FD
%0AFF7D27F8F8F827FFFF7DF8F8FF52F8A8FD0CFFA852FFFF5227A85227F8
%F82752F827FD05FFA8277DFD0BFFA827F8F827FFA8F8F87DA8F827FD0DFF
%52FFFFFFA8277DA8F8277DFFFFA8A8FD06FF7D7DFD0DFF52F827A827F8F8
%7DA8F827A8FD0CFF27FD04FF27F8F852FD0CFF27FD0EFFA8FD08F87DFFFF
%7DA8FD09FFA8F8FD05FF52A8FD0DFF27FD0EFF7DFD04F852FFA852F87DFF
%FF7DF8277DA8FD05FF27A8FD14FF52FD0DFFA8FD05F8A8FFFF7DF8F8A8FF
%FF27FD04F8527DFF527DFD14FF7DA8FD0DFF27FD0CF8FFFF7DFD08F8A8FD
%14FF7DA8FD0DFF27F8F8A8FFFD08F8A8FFA8FD08F82752FD13FF27FD0EFF
%F8F8F8A8A827F8F8F827F8F8F8A8FFFF27FD0AF8A8FD11FF52FD0EFF52FD
%08F87DFFF8F87DFFFF52FD0BF852FD0FFFA852FD0EFFA8FD04F827F8F8F8
%FF7DF8F8A8FFFF52FD0CF852FD0EFF52FD10FF7D2727FFA827F8F827F8F8
%F852FFFF27FD0DF87DFD0DFF27FD0FFF7DA8F8FFFFFFA8FD06F8277D52FD
%0FF8A8FD0BFFA852FFFFFF7D7DFD08FFA8FD04F8FD04FF7D27F8F8F82727
%FD11F827FD0BFF27A8FFFF27A8FD09FFFD05F8A8FD05FF52FD16F852FD09
%FFA827FFFF7DA8FD09FF7DF8F8F82727F8527DFFFFFF27A8A87DFD14F8A8
%FD08FF5252FFFF7DFD0AFF7DF8F8F8A827FD04F87DA852FFFFFFA8F87DA8
%A85227FD0DF87DFD08FFF8FFFFFF52FD0AFF7DF8F82752F8F8F85252F827
%52FD04FF27A8FD04FF7D27FD0CF8FD07FF2752FFFF7D52FD0BFFA8FD05F8
%7DFFFFF8F8FD05FF27FD07FF52FD0BF852FD05FF7D27FD04FFF8FD0CFF27
%FD04F8FFFFFFF827FD04FF7D52FD07FF7DFD0CF8FD04FFA8277DFD04FF52
%F8A8FD0BFFFD04F8FFFF52F8F8FD04FF27A8FD07FF52FD0CF87DFFFFFF27
%52FD06FF7D27FD04F852FD06FF52F8F8F827F8F852A827525227F8FD08FF
%52FD0DF8FFA82727FD09FFA8F8F87DFD08FF52272727527DFD04FFA8A87D
%527DFD06FF27FD0DF8522727FD0AFF5227FD18FFA852277DFFFFFFFD10F8
%FD0AFFA8F8FD1BFFA8F827527DFD0FF8FD0BFFA852FD1DFF52FD10F8A8FD
%0BFFA852FD1EFF7D27FD0DF8A8FD0CFF52F852FD1EFFA852FD0AF827A8FD
%09FFA82727527D527D27FD1FFFA8FD05F827277DA8FD0AFF7DF8A8FD1DFF
%5227272752FD05FF7DA8A8FD0EFFA827FD1EFF7DA8FFFFFF5252FD15FF27
%FD25FF52FD0EFFA87D52A8FFFF5252FD25FF52FD0DFF7D27F8F8F8527D27
%7DFD25FF5252A87DA87DA87DFD05FF5252A8FFFFA85227F87DFD25FF27F8
%52A8FFFFFF7D7DFFFFFF52A8FD08FFA8FD24FF7D27A8FD06FFA8527D27A8
%FD2EFFA8FD09FF52F8A8FD39FFA827FD19FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0.05 0.89 0.8 0.2 (Apple Red) 0 x
(Apple Red) Pc
1 1 0 0 (Beautiful Blue) 0 x
(Beautiful Blue) Pc
0 0 1 0 (Bright Yellow) 0 x
(Bright Yellow) Pc
0 1 1 0 (Fire Engine Red) 0 x
(Fire Engine Red) Pc
1 0 1 0.49 (Gladstone Green) 0 x
(Gladstone Green) Pc
0.49 0 0.49 0 (Lime Green) 0 x
(Lime Green) Pc
0.25 0.25 0.25 0 (Medium Process Gray) 0 x
(Medium Process Gray) Pc
0 0.29 0.8 0 (Orange Juice) 0 x
(Orange Juice) Pc
0.05 1 0.05 0.05 (Popular Purple) 0 x
(Popular Purple) Pc
0.05 0.49 0.2 0 (Pretty Pink) 0 x
(Pretty Pink) Pc
0.05 0.05 1 0.29 (Ripe Banana) 0 x
(Ripe Banana) Pc
0.09 1 1 0.2 (Rose Red) 0 x
(Rose Red) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0 g
800 Ar
2 J 0 j 1 w 2 M []0 d%AI3_Note:0 D
0 XR
41 107.7998 m
40.6006 107.5 40.6006 106.2998 41.2998 105.6001 C
41.2998 105.3999 41.2002 105.2002 41 105.1001 C
39.1006 104.5 41 108.1001 38.2002 107 C
39.2002 107.7998 39.7002 108.7002 41 107.7998 C
f38.2002 105.1001 m
37.8994 104.7998 37.5 104.6001 37.7002 104.2002 C
38.2002 103.2998 39 103.2998 39.7998 103.2002 C
39.2002 102.3999 38.5 103.7002 37.7002 103.7002 C
37.7002 105.1001 L
38.2002 105.1001 L
f31.8994 99.7998 m
31.2998 99.7002 30.1006 99.1001 29.7998 98.2002 C
30.1006 98.2998 30 98.6001 30 98.8999 C
29 99.2998 28.7002 99.1001 27.6006 99.1001 C
29.2998 99.2998 30.1006 99.8999 31.8994 99.7998 C
f38.8994 97.8999 m
40.7998 97.8999 40.7002 94.3999 42.5 95.5 C
42.2002 94.8999 41.6006 95 41 95 C
40 95.6001 40.7002 97.5 39.1006 97.2002 C
37.3994 95.2998 L
39.3994 99.7998 L
38.8994 97.8999 L
f21.3999 94.2998 m
21.7998 92.5 22.5 90.3999 21.6001 88.6001 C
20.5 85.3999 16.7002 84 14.2002 84 C
11.7998 84.7998 8.7998 86 8.2002 88.7998 C
7.6001 91.2998 8 93.8999 9.6001 95.7998 C
10.7998 96.8999 12.3999 98 13.8999 97.7002 C
13.3999 97 12.1001 96.1001 11 95.7998 C
9.5 94 8.1001 91.8999 8.8999 89.5 C
9.7002 87.7998 11 85.7998 13 85.2002 C
15.1001 84.7002 17.5 84.8999 19 86.6001 C
16.1001 87 17.7998 91.1001 16.2998 92.6001 C
15.5 91.2998 17.2002 88 14.8999 88.1001 C
14.5 90 13.3999 93.1001 14.8999 94.2998 C
15.2002 94.2002 15.6001 94.1001 15.7998 93.7998 C
17.2998 96 L
17.1001 97 16 96.8999 15.3999 97.2002 C
15.1001 97.6001 15.2002 97.8999 15.6001 98.2002 C
17.8999 97.7002 20 96.3999 21.3999 94.2998 C
f31.2002 94.7998 m
30.5 94.7002 29.3994 95.7998 29.5 96.7002 C
29.7998 97.3999 L
29.2998 96.2002 30.5 95.2002 31.2002 94.7998 C
f13.2002 93.6001 m
13.3999 91.5 14 88.3999 11.5 87.3999 C
12.2002 89.8999 11.2002 92.6001 11.2998 94.7998 C
12.2002 95.2002 12.7998 94.2002 13.2002 93.6001 C
f1 g
20.8999 92.6001 m
21.7002 90.7998 20.6001 89.2002 19.8999 87.6001 C
19.2002 87.1001 L
19 94.7998 L
20.2002 94.7002 20.2998 93.3999 20.8999 92.6001 C
f0 g
39.3994 90.7002 m
40.1006 90.7002 L
39.5 89.6001 38.1006 88.8999 38.6006 87.3999 C
38.5 87.7998 38 88.2998 37.3994 88.1001 C
39.5 89.7998 36.2002 90.5 38.6006 92.2002 C
39.1006 91.7998 38.6006 91 39.3994 90.7002 C
f30 86.3999 m
27.6006 86.8999 28.8994 89.7002 28.6006 91.3999 C
29 89.7998 27.8994 87.3999 30 86.3999 C
f42.2002 91 m
42.8994 90 42.8994 88.7002 43.2002 87.6001 C
42.2998 87.5 41.5 86.7002 40.6006 87.3999 C
40.5 88.8999 43.1006 88.1001 42.5 90 C
41.8994 90.3999 41.6006 91.2998 40.7998 91 C
41.2998 91.6001 41.6006 90.7998 42.2002 91 C
f31.2002 86.6001 m
32.2002 87.7998 L
31.8994 87.3999 L
31.2002 86.6001 L
f41.5 79.2002 m
40.7998 79.7002 41.2002 80.8999 40.1006 81.1001 C
37.8994 79.3999 L
40.1006 84 L
37.3994 81.6001 41.8994 81.1001 41.5 79.2002 C
f30 82.6001 m
29.2998 82.3999 29 82 28.7998 81.3999 C
29 81.2002 28.3994 82.1001 28.1006 82.2998 C
29.2998 83.5 L
29.6006 83.2002 29.6006 82.7998 30 82.6001 C
f31 78.7002 m
32.3994 78.7002 L
31 78.7002 L
f28.7998 61.3999 m
29.6006 60.2998 30.3994 58.2998 32.2002 58.2998 C
35.2998 60.7998 40.3994 62.1001 44.6006 60.5 C
48.7998 56.7998 52.2002 52.1006 50.3994 46.6006 C
50.7998 46.2998 51.5 46.2998 51.6006 45.6006 C
49.2998 44.2002 52.6006 40.7002 48.7002 41 C
47 39.3994 L
44.2002 31.3994 44.7002 22.1006 37.3994 16.1006 C
35.6006 12.7002 31.3994 12.2002 28.1006 12.2002 C
24.2002 14 21.5 17.5 17.2998 17.7998 C
16 17.6006 15.2002 19 13.7002 18.5 C
12.7998 17 10.7998 17.2998 9.6001 17.2998 C
7.2998 17.6006 7.8999 20.7998 5.7998 21.6006 C
5.8999 23 6.1001 24.6006 7.7002 25.2002 C
8.6001 25.1006 9.6001 25.1006 9.7998 26.2002 C
7.8999 26.8994 7.3999 29.2998 8.3999 31 C
8.7998 31.6006 9.7002 32 9.3999 32.8994 C
8.3999 35.2002 3.3999 35.5 6 39.1006 C
7.1001 42.2002 9.7002 38.2002 10.7998 40.7998 C
9.5 41.6006 10.1001 43.2998 10.2998 44.3994 C
11.8999 48.6006 14.5 43.3994 17 45.1006 C
18.7002 43.6006 20.2998 42.1006 19.7002 39.6006 C
19.8999 37.1006 14 34 19.2002 32.3994 C
21.7002 32.1006 23.7998 31.1006 26.2002 30.5 C
27.7998 32 28.6006 34.6006 28.6006 36.7002 C
21.1001 39.5 22.7002 48 17 52.6006 C
15.2998 53 13.6001 53.5 12.2002 55 C
11.8999 56.2002 12.7998 56.6001 13.7002 56.8999 C
14.3999 58.1001 12.5 59 13.2002 60.5 C
14.2998 60.7998 14.8999 59.8999 15.6001 59.2998 C
16.8999 60.6001 15 62.2998 16.2998 63.6001 C
18.2002 63.5 18.2002 58.2998 20.3999 62.2002 C
22.1001 61.7998 19.7998 58.1001 22.7998 59.2998 C
23.5 62 25.1001 65.1001 28.2998 65.5 C
29.6006 64.2998 27.8994 62.7998 28.7998 61.3999 C
f1 g
18.2002 59 m
18.8999 59.1001 19.3999 59.7998 19.8999 60.2002 C
19.7002 59.8999 20.1001 57.2002 21.7998 57.3999 C
19.6001 53.5 25.7002 51.1006 21.7998 47.7998 C
18.2002 52.7998 L
16.6001 53.7002 14.1001 53.7998 13.3999 55.3994 C
14.1001 56 15.3999 55.2002 15.7998 56.3999 C
15.1001 58.1001 L
16.7998 58.1001 L
16.7998 61.2002 L
18.2002 59 L
f39.3994 59.7998 m
38.7002 57.8999 36.5 58.2998 35 58.6001 C
34.7998 58.7998 L
36.2002 59.5 37.7002 60.5 39.3994 59.7998 C
f43 59 m
43.1006 57.8999 41.7998 57.2002 41 56.6001 C
40.6006 57.3999 39.2002 56.8999 39.3994 58.1001 C
40.2998 59.1001 41.6006 59.1001 43 59 C
f46.1006 57.1001 m
46.5 55.6001 45.3994 54.7002 45.1006 53.5 C
43.7002 52.7998 43.1006 54.5 42.2002 55.3994 C
42.3994 56.7998 45.2998 60.7002 46.1006 57.1001 C
f25 52.6006 m
24.7002 52.1006 24.1001 51.7998 23.7998 52.2998 C
22.7998 53.2998 22.6001 54.8994 23 56.2002 C
23.7998 55.2002 25 53.7998 25 52.6006 C
f48 53.2998 m
47.7998 51.6006 L
45.3994 52.1006 L
46 52.8994 47.8994 57.3999 48 53.2998 C
f49.2002 49.7002 m
48.7002 49.7002 L
49.3994 52.7998 L
49.7002 51.8994 50 50.3994 49.2002 49.7002 C
f30.5 49.2002 m
29.5 49.2002 28.3994 50.2998 27.6006 49.2002 C
30.2002 47.7998 L
29.2002 46.8994 27.3999 47.5 26.6001 46.2998 C
30.1006 46.7998 34 46.8994 36 43.3994 C
36.7002 44.7002 35.2002 45.6006 34.2998 46.6006 C
35.2002 47 37.2998 46.6006 37.7002 47.7998 C
35.7998 48.8994 32.8994 47.5 31.2002 49 C
33.3994 49 37 50 40.1006 49 C
41.5 45.2998 42.7998 40 39.7998 36.5 C
38.1006 35.7002 36.2002 35.8994 34.6006 36.5 C
35.3994 37 36.8994 37.3994 37.3994 38.6006 C
36.6006 42.1006 32.7998 43.7002 29.7998 44.3994 C
28.3994 43.6006 28.2002 41.3994 29 40.1006 C
30.1006 38.5 31.6006 37.7002 33.1006 37 C
29.3994 37.5 24.7002 39.2002 23 43.3994 C
22.3999 46.6006 22.7998 49.8994 25.7002 51.7998 C
27.3999 51.2998 29.1006 50.2002 30.5 49.2002 C
f46.2998 50.2002 m
46.7002 48.7998 45.3994 47.6006 46.6006 46.6006 C
48.1006 46.2998 47.8994 48.3994 49.3994 48 C
49 47 46.8994 46 48.2002 44.8994 C
49 44.5 49.3994 45.6006 49.8994 44.8994 C
49.5 44.5 48.2002 43.8994 48.2002 43 C
49 42.2002 L
46.2002 41.6006 46.1006 38.6006 45.6006 36.5 C
44.5 35.8994 43.3994 36.7998 42.7002 37.7002 C
41.7002 40.8994 43.7998 45.1006 41.5 48 C
41.5 49.2002 L
43.1006 49.1006 42.2002 46 44.2002 46.7998 C
45.2002 47.7998 44.8994 49.7002 46.2998 50.2002 C
f16.7998 43.3994 m
16.3999 43.7002 15.7998 43.7002 15.3999 43.7002 C
15.3999 44.2002 16.1001 44.7002 16.6001 44.2002 C
16.8999 44 16.7998 43.7002 16.7998 43.3994 C
f13.7002 43.8994 m
14.6001 42.7998 13 42.2002 12.7002 41.2998 C
12 41.5 L
11.6001 42.7002 12.5 44 13.7002 43.8994 C
f36 38.6006 m
34.8994 37.6006 33.2998 38.5 32.2002 38.8994 C
30.6006 40 29.2002 41.2998 29.7998 43.2002 C
32.2998 42.7998 35.2998 41.3994 36 38.6006 C
f16.7998 41 m
17.2998 40.2998 16.6001 39.3994 16.1001 38.6006 C
15.2002 39.1006 15.5 41.2998 16.7998 41 C
f15.3999 33.7998 m
16 32.5 16.7998 33.5 17.7998 32.8994 C
20.2998 32.1006 20.2998 29.3994 20.8999 27.3994 C
20.6001 26.6006 20.5 25.3994 19.3999 25.3994 C
17.7002 26.5 19.2998 29.2998 17.7998 31 C
16.7998 32.2002 16 33.7998 14.2002 33.6006 C
15.2998 36.2998 18.2998 37.6006 18.7002 40.6006 C
19.1001 37.7002 16 36.2998 15.3999 33.7998 C
f15.1001 37.3994 m
15.3999 36.7998 14.6001 36.7002 14.3999 36.2002 C
13.2002 37.5 10.1001 38.1006 10.7998 40.1006 C
12.7998 40.5 13.7998 38.5 15.1001 37.3994 C
f7.8999 36.2002 m
7.7002 37.1006 8.2002 37.1006 8.6001 37.7002 C
9 37.3994 8.3999 36.6006 7.8999 36.2002 C
f45.1006 34.7998 m
43.8994 28.7002 42.5 21.6006 37.2002 17.2998 C
34.8994 22 32.8994 28.2002 27.3999 30 C
27 31.3994 28.7002 31.8994 28.7998 33.1006 C
28.3994 34.3994 29.3994 35.2002 29.7998 36.2002 C
30.5 36.2002 31.3994 35.6006 31.7002 34.7998 C
31.2998 33.7002 32.2002 32.7998 33.1006 32.6006 C
35.2002 32.7998 37.1006 36.3994 39.1006 34.1006 C
41.2998 37 L
45.1006 34.7998 L
f13 35.2998 m
12.2002 34.7002 12.2002 33.1006 10.7998 33.6006 C
10.3999 34.2002 10.3999 35.2998 11 35.7998 C
11.6001 36.7002 12.7998 36.1006 13 35.2998 C
f34.2998 35 m
34.5 34.6006 34.1006 34.3994 33.7998 34.1006 C
33.2998 34.1006 32.7002 34 32.3994 34.6006 C
32.6006 35.2998 L
33.1006 34.8994 33.7998 35.1006 34.2998 35 C
f15.6001 31.3994 m
15.2002 30.5 13.7002 31.2998 13 30.7002 C
12.2998 32.7998 15 32.5 15.6001 31.3994 C
f12 29 m
12 28.2998 11.2002 27.7002 10.6001 28.2998 C
10.1001 28.6006 10.3999 29.1006 10.2998 29.5 C
11 30.3994 11.6001 29.7998 12 29 C
f16.6001 27.7998 m
16.5 27.2002 16.1001 26.2998 15.6001 26.3994 C
14.5 27 15.6001 27.7998 15.6001 28.6006 C
16 28.6006 16.2998 28.1006 16.6001 27.7998 C
f14.3999 21.7998 m
13.3999 23.7998 8.7002 22.6006 10.6001 25.8994 C
12.8999 28.7002 12.5 23.7998 14.8999 24.5 C
15.6001 23.5 14.6001 22.7002 14.3999 21.7998 C
f0 g
48 25.7002 m
46.7002 25.5 45.2998 24.1006 45.1006 22.7998 C
44.6006 21.2002 45.7002 19.8994 47 19.3994 C
51.1006 19.3994 L
49.7002 18.2002 47.2002 17.5 47.5 14.8994 C
47.8994 13.8994 49.1006 14.2998 49.3994 13.3994 C
47.6006 13.6006 44.8994 13.7998 43.2002 12.2002 C
42 11.2002 41.5 9.7998 41.7998 8.2002 C
39.7998 8.5 37.8994 9.7002 35.7998 8.8994 C
34.2002 8 32.7998 6.7998 32.2002 5 C
31.6006 6.2002 30.5 7.8994 29 8.3994 C
26.7998 8.5 24.8999 7.6006 23.2998 6.2002 C
24.1001 7.5 24.7002 9.3994 23.7998 10.7998 C
22.8999 12.1006 20.8999 11.5 19.7002 11.2998 C
19.3999 11 L
19.8999 12 22.3999 12.2998 23.7998 11.5 C
25 10.7002 23.7998 8.7002 25.2002 8.2002 C
26.8999 8.6006 28.1006 8.2998 30 8.3994 C
33 2.8994 35.2002 12.7002 39.6006 9.3994 C
40.6006 8.8994 L
41.7002 10.8994 42.5 13.2998 45.1006 13.7002 C
48.3994 13 46 16.7998 48 17.7998 C
48.3994 19.2998 46.3994 18.7002 45.7998 19.3994 C
43.7002 21 45.1006 23.5 46.1006 25.2002 C
46.7002 25.3994 47.2998 26.3994 48 25.7002 C
f1 g
18.7002 24.5 m
18.7998 24.1006 18.1001 24.2998 17.7998 24.2002 C
17.7998 24.7002 L
18.1001 24.7002 18.5 24.8994 18.7002 24.5 C
f19 21.1006 m
18.5 19.7998 17.8999 17.5 15.7998 18.7002 C
13.6001 19.3994 16 21.2998 15.6001 22.7998 C
16.6001 24.1006 19.1001 22.7002 19 21.1006 C
f9.6001 22.7998 m
9.2002 22.2002 8.8999 21.6006 8.3999 21.1006 C
7.8999 21.5 8.2998 22.6006 8.8999 23 C
9.1001 23 9.5 23.1006 9.6001 22.7998 C
f25.7002 20.8994 m
25.7998 19.1006 25.6001 17.3994 25 15.7998 C
19 18 L
20.2002 22.2998 L
22.2998 22.7002 23.8999 21.5 25.7002 20.8994 C
f13.2002 20.8994 m
13.6001 19.7002 12.7002 19.2002 12 18.5 C
11 18.7002 L
10.7002 20 11.3999 21.1006 12.5 21.6006 C
12.7998 21.6006 13.2002 21.2002 13.2002 20.8994 C
fLB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
