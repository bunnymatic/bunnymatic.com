%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (miffy ) (obeymiffy.com)
%%Title: (obey_its_easy.ai)
%%CreationDate: (8/17/2001) (10:18 PM)
%%BoundingBox: 25 325 302 595
%%HiResBoundingBox: 25.793 325.6475 301.4795 594.9995
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: AshleyInline
%%DocumentNeededFonts: AshleyInline
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 264 216 264 216
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -154.5 736.5 0.9386 809 727 18 0 1 42 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 16 72 16 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 128 8
%%BeginData: 17694 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C457D2752275227FD56F85227522752275227522752FD17F8277D277D
%A87D527D527D7DFD04A8FD19FFA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8
%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D
%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8
%A87DA8A8A8527D527D527D272727A8FD7CFFA827F8A8FD7CFF7D52F8A8FD
%05FF527DFD0AA87D7DFD05A8FFFD11A87D527D527D527D527D527D527D7D
%FD07A8FD3DFFA852F8A8FD04FFF8FD0727FD05F8FD1B27FD14F827FD3BFF
%7D52F8A8FD04FFF852F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3
%F7F3F3F3F7F37D27FD3BFF7D27F8A8FD04FFF87DFD0DF37D52527DF3F3F3
%7DA8FD07F3A8A8F3F3F3A87DFD04F3A8F3F3F37DFD0CF37D27FD3BFF5227
%F8A8FD04FFF87DF3F3F3F7F3F3F3F7F3F3F3A827277D522752F3F7A8FD05
%F852F7F37DFD05F827F3F3F37D27A8F3A8277DF3F7F3F3F3F7F3F3F3F7F3
%5252FD3BFF7D27F8A8FD04FFF87DFD0AF3A8F85227F8F8522752F37D2752
%52527D2752F37D277D527D5227F3F352F85227A82752F87DFD0AF35227FD
%3BFF5227F8A8FD04FFF87DF3F7F3F3F3F7F3F3F3F752522752F3A8275227
%A87D2752527DF87D27F37D522752527D52F3F7A8275252F8522752F3F3F3
%F7F3F3F3F7F3F3F35252FD3BFF7D27F8A8FFFFFFA8F87DFD0AF3F87D27F3
%F3F37D27277D7D2727F8F8F82752F37D2727F82727FD04F3A8F852522727
%FD0CF352F8FD3BFF5227F8A8FFFFFFA8F87DF3F7F3F3F3F7F3F3F3F7F852
%7DF7F3F3F3F87D52A8277D527D527D27F37D527D7D5252F3F3F7F3F3A8F8
%7D27F3F7F3F3F3F7F3F3F3F7F3F3F352F8FD3BFF7D27F8A8FFFFFFA8F8A8
%FD0AF3F87D27F3F3F37D27277D7D272752525227277D7DFD0527FD06F3F8
%527DFD0DF37DF8FD3BFF5227F8A8FFFFFFA8F87DF3F3F3F7F3F3F3F7F3F3
%52522752F3A8275227A8A82727527D275227A87D272752527D52A8F3F3F7
%F3F87D52F3F3F3F7F3F3F3F7F3F3F3F7F37DF8FD3BFF7D27F8A8FFFFFFA8
%F87DFD0AF37DF85227F8F8522752F37D275252527D5227F37D277D527D52
%27FD05F3F85252FD0DF37DF8FD18FF7D52FD21FF5227F8A8FFFFFFA8F87D
%F3F3F3F7F3F3F3F7F3F3F3A827277D522752F3F77DFD05F852A8F37DFD06
%F8F3F3F3F7F3F82752F3F3F3F7F3F3F3F7F3F3F3F7F37DF8FD18FF27A8FD
%21FF7D27F8A8FD04FFF87DFD0DF37D52527DF3F3F37DFD08F3A8FD05F3A8
%7DF3F3F3A8F3F3A8FD0DF3A8F8FD0AFF7D2752FFA82727F8F8F8272752FF
%7DFF7DF8F827A8FD1CFF5227F8A8FD04FFF87DF3F7F3F3F3F7F3F3F3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3
%F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F8FD0AFF52F8F8FFA8FD08F8FF
%FF52FD05F8FD1CFF7D27F8A8FD04FFF87DFD16F3522727A8FD20F3F8FD0A
%FF52F8F8FFFFFFA827F8F85252A8FFFFF8F8F87D52A8FD1CFF5227F8A8FD
%04FFF87DF3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F352274B4BF8
%52F3F3F7F3F3F3F7A8FD04277DF3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3
%F7F8FD0AFF52F8F8FD04FFA8F8F8FD05FF52F8F8F827A8FD1CFF7D27F8A8
%FD04FFF8A8FD14F3522775769A76F87DFD05F37DF8769A754BF87DFD11F3
%F8FD0AFF27F8F8FD04FF7DF8F8FD05FFA87DFD04F8FD1CFF5227F8A8FD04
%FFF87DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3A84B76769A769A76
%F8F3F3F3F7A8F89A9A769A764B27F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3
%F3F8FD0AFF27F8F8FD04FFA8F8F87DFD04FFA8527D27F8F8FD1CFF7D27F8
%A8FD04FFF87DFD13F3524B759A7576759A277DF3F3F3F8769A7576759A75
%F8A8FD10F3F8FD0AFF27F8F8FD04FF7DF8F8A8FD04FF27FD04F827FD1CFF
%5227F8A8FD04FFF87DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3A8F876
%9A76A0769A764B7DF3F37D279A76A0769A76A0277DF3F7F3F3F3F7F3F3F3
%F7F3F3F3F7F3F3F8FD0AFF27F8F8FD05FF2752A8FD04FFA827F8F852FD1D
%FF7D27F8A8FD04FFF87DFD12F352279A769A759A769A7527F3F3274B769A
%759A769A75F87DFD10F3F8FD1CFFA8FD1EFF5227F8A8FD04FFF87DF3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7524B769A769A769A769A27F7A8F89A
%9A769A769A769A277DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F8FD3BFF7D
%27F8A8FD04FFF87DFD12F3274B9A7576759A75767527F352279A7576759A
%757675F8A8FD10F3F8FD23FF7DA8FD16FF5227F8A8FD04FFF87DF3F7F3F3
%F3F7F3F3F3F7F3F3F3F7F3F3F3F7274B76A0769A76A0769A27F7524B76A0
%769A76A0767627F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F8FD10FF7D7D
%7DFD0FFFA8F852FD0BFFA852A8FD08FF7D27F8A8FD04FFF8A8FD12F3274B
%9A759A769A759A7620F3F8769A759A769A759A5127FD11F3F8FD0FFFFD04
%F852FD0DFFA8F8F827FD0BFF52F827FD08FF5227F8A8FD04FFF87DF3F3F3
%F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3274B769A769A769A769A27A8F87576
%9A769A769A76267DF3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F8FD0EFF27
%FD04F852FD0DFF52F8F852FD04FF7D527DFD04FFF8F8F8A8FD07FF7D27F8
%A8FD04FFF87DFD12F3274B76759A7576759A75F87DF87576759A7576759A
%F8A8FD10F3A8F8FD0DFFFD06F87DFD0CFFA8F8F8F87DFFFFFF7DF8F8F852
%FFFF52F8F8F8A8FD07FF5227F8A8FD04FFF87DF3F3F3F7F3F3F3F7F3F3F3
%F7F3F3F3F7F3F35220769A76A0769A76A0275227A0769A76A0769A7527F3
%F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F37DF8FD0CFF27FD06F8FD0DFF52F8
%F8F8A8FD04FF52F8F827FFFF27F8F8F8FD08FF7D27F8A8FD04FFF87DFD12
%F37D279A769A759A769A75F85220759A769A759A76207DFD11F3A8F8FD0B
%FF52FD06F87DFD05FFA82727A8FD04FF27F8F827FD05FF52F8F852FF7DF8
%F8F827FD08FF5227F8A8FD04FFF87DF3F7F3F3F3F7F3F3F3F7F3F3F3F7F3
%F3F3F7A8F8769A769A769A769AF827279A769A769A7675F8A8F3F7F3F3F3
%F7F3F3F3F7F3F3F3F7F3F3F37DF8FD0AFF7DFD06F827FD05FFA8F8F8F8A8
%FD04FF27F8F87DFD05FF27F8F87DFF27F8F8F852FD08FF7D27F8A8FD04FF
%F87DFD12F3A8F89A7576759A757675202627759A7576759A4B27FD12F37D
%F8FD09FFA827F8F8F827F827A8FD04FFA8FD04F8A8FD04FF27F8F8F8FD04
%FFA8F8F8F8A87DFD04F87DFD08FF5227F8A8FD04FFF87DF3F7F3F3F3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F3F876A0769A76A0769A76A0769A76A0769A76
%F87DF3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F37DF8FD09FF7DF8F8F852
%FFA8A8FD05FF27F8F8F852FD05FF7DFD04F87DFFFF52F8F827FF27FD04F8
%FD09FF7D27F8A8FD04FFF8A8FD12F37DF86F759A769A759A769A759A769A
%759A7675F87DFD12F37DF8FD09FFFD04F87DFD07FF52F8F8F827A87DA8FF
%FFFF7DF827F8F8F87DFF27F8F827A8FD04F827FD09FF5227F8A8FD04FFF8
%7DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F37D264B769A769A769A769A76
%9A769A769A769A9A27277DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F37DF8
%FD08FF7DF8F8F827FD07FF7DF8F8F827FF52F8F87DFFFFF827FF7DF8F827
%FFF8F8F87D27FD04F8A8FD09FF7D27F8A8FD04FFF87DFD10F35227757576
%759A7576759A7576759A7576759A7576754BF852FD10F37DF8FD08FF27F8
%F8F8A8FFFF7DA8FFFFA8FD04F8A8FF27F8F852FF7DF852FF52F8F8F8A8F8
%F8F827FD05F8FD0AFF5227F8A8FD04FFF8A8F3F3F3F7F3F3F3F7F3F3F3F7
%F3F3F352279A76A0769A76A0769A76A0769A76A0769A76A0769A76754B7D
%F3F7F3F3F3F7F3F3F3F7F3F3F3F7F37DF8FD08FFF8F8F827FFFF27F8F8FF
%FF7DF8F8F87DFFA8F8F8F8A8FF27F8FFFF27F8F8F87DFD08F852FD0AFF7D
%27F8A8FD04FFF8FD0FF37DF875769A759A769A759A769A759A769A759A76
%9A759A769A754B27FD0FF3A8F8FD07FF7DF8F8F8277DFD04F8A8FFF8F8F8
%27A8FF27F8F8F8A87DF852FF7DFD04F852FD04F852F8F8F8A8FD0AFF5227
%F8A8FD04FFF8F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7274B769A769A769A76
%9A769A769A769A769A769A769A769A769A76F8A8F3F3F7F3F3F3F7F3F3F3
%F7F3F3F37DF8FD07FF7DFD08F852FF7DF8F8F852FFA8F8F8F827FFF827FF
%7DFD04F8277DF8F8F8527DF8F827FD0BFF7DF8F8A8FD04FFF8FD0EF3A8F8
%759A7576759A7576759A7576759A7576759A7576759A7576759A4B27FD0E
%F37DF8FD07FF7DFD08F8FFFF52F8F8F8A8A827F8F8F87D27F87DA8FD05F8
%7DFF52F8F8A87DF8F852FD0BFF52F8F8A8FD04FF52F3F3F7F3F3F3F7F3F3
%F3F7F3F3F37D4B9A76A0769A76A0769A76A0769A76A0769A76A0769A76A0
%769A764BF8F3F3F7F3F3F3F7F3F3F3F7F3F3F37DF8FD08FF52FD06F852FF
%FFF8F8F827FF7DFD04F827F8F8FFA8FD04F827FFFFFF7DA8FF27F8F8FD0C
%FF7DF8F8A8FD04FF27FD0EF37D4B769A759A769A759A769A759A769A759A
%769A759A769A759A769A75F87DFD0DF37DF8FD09FF7D27FD04F87DFFA8F8
%F8F852A8FD07F87DFFFFF8F8F827A8FD05FFA8F8F827FD0CFF52F8F8A8FD
%04FF27F7F3F3F3F7F3F3F3F7F3F3F3F7F352769A769A769A769A769A769A
%769A769A769A769A769A769A769A769AF852F3F3F3F7F3F3F3F7F3F3F3F7
%F37DF8FD0BFF27F8F8F8FFFFA8F8F8F87D27FD06F852FFFFFFA82752A8FD
%06FF52F8F8F87DFD0BFF7DF8F8A8FD04FF27FD0EF3524B7576759A757675
%9A7576759A7576759A7576759A7576759A757675F852FD0DF37DF8FD0AFF
%52F8F8F852FFFF7DFD0AF827A8FD0DFFFD04F852FD0BFF52F8F8A8FD04FF
%27F7F3F3F3F7F3F3F3F7F3F3F3F7F37D51A0769A76A0769A76A0769A76A0
%769A76A0769A76A0769A76A0769AF87DF3F3F3F7F3F3F3F7F3F3F3F7F352
%F8FD0AFFFD04F87DFFFF7DFD05F852FF7DF852FD0EFF7DF8F8F827FD0CFF
%7DF8F8A8FD04FF27FD0EF37D27759A769A26F8769A759A769A759A769A75
%9A769A756F769A759A76F8A8FD0DF352F8FD09FF7DFD04F8FFFF7DFD06F8
%A8FD12FF7DF8F8F87DFD0CFF52F8F8A8FFFFFFA8F8F3F3F7F3F3F3F7F3F3
%F3F7F3F3F37D279A769A764B279A769A769A769A769A769A769A76F84B9A
%769A764B27F3F3F7F3F3F3F7F3F3F3F7F3F3F352F8FD09FF7DF8F8F827FF
%7DF8F8277DF827A8FD13FF7DF8F852FD0DFF7DF8F8A8FFFFFFA8F8FD0EF3
%A8F84B6F7576759A7576759A7576759A7576759A754B26207576759A4B27
%FD0EF352F8FD09FF7DFD04F827F8F827FD19FFF827A8FD0DFF52F8F8A8FF
%FFFFA8F8F3F3F7F3F3F3F7F3F3F3F7F3F3F3274B4B4B206F7676A0769A76
%A0769A76A0769A76A0769A764B6F4427F87DF3F3F7F3F3F3F7F3F3F3F7F3
%F3F352F8FD0AFF27FD05F827FD2AFF7DF8F8A8FD04FFF8FD0DF3524B9A76
%9A75754B9A759A769A759A769A759A769A759A764B2775769A75F87DFD0D
%F352F8FD0BFFFD04F827FD2BFF52F8F8A8FD04FFF8F7F3F3F3F7F3F3F3F7
%F3F3F3F7276F769A769A764B769A769A769A769A769A769A769A769A529A
%769A769A4B27F3F3F3F7F3F3F3F7F3F3F3F7F352F8FD0CFF5252A8FD2CFF
%7DF8F8A8FD04FFF8FD0DF3274B9A7576759A75F8769A757675757576769A
%7576759A4B26759A7576752627FD0DF352F8FD3BFF52F8F8A8FFFFFFA8F8
%F7F3F3F3F7F3F3F3F7F3F3F3F77DF876A0769A7620984A75274B4B76F827
%4B764B514B754A277576A09A4B207DF3F3F3F7F3F3F3F7F3F3F3F7F37DF8
%FD3BFF7DF8F8A8FFFFFFA827FD0CF3A8F8264A994A6F2098FD04BA92986E
%6E4A6E6E98FD04BA924AF8F8206E6E207DFD0CF3A8F8FD3BFF52F8F8A8FF
%FFFF7D27F3F3F7F3F3F3F7F3F3F3F7F3276EFD1EBA4A7DF7F3F3F3F7F3F3
%F3F7F3F3F37D27FD3BFF7DF8F8A8FFFFFFA827FD0CF3F898FD1EBA4A7DFD
%0CF37D27FD3BFF52F8F8A8FFFFFFA852F3F3F7F3F3F3F7F3F3F3F7F3F898
%BABA9874FD15BA984A98BABA52F3F7F3F3F3F7F3F3F3F7F3F3F37D52FD3B
%FF7DF8F8A8FFFFFFA827FD0CF35244BABABAF82692FD11BA4AF827F892BA
%20A8FD0DF37D27FD3BFF52F8F8A8FFFFFFA827F7F3F3F3F7F3F3F3F7F3F3
%F3A82792BABA4A7651206E98FD0BBA984AF84B7676F89820A8F7F3F3F3F7
%F3F3F3F7F3F3F3F7F37D27FD3BFF7DF8F8A8FFFFFFA827FD0DF37DF84ABA
%20759A757676274B4A6E6E986E984A4AF84B4B7576759AF827A8FD0FF37D
%27FD3BFF52F8F8A8FFFFFFA827F7F3F3F3F7F3F3F3F7F3F3F3F7F37D27F8
%269A76A0769A76A0769A76A0769A76A0769A76A0769A76F8A8F3F3F7F3F3
%F3F7F3F3F3F7F3F3F3F7F37D52FD1DFFA8A8FD1CFF7DF8F8A8FFFFFFA827
%FD10F37DF89A9A759A769A759A769A759A769A759A769A759A769AF8A8FD
%10F3A827FD1BFF52FD04F827525252FD17FF52F8F8A8FFFFFF7D27F3F3F7
%F3F3F3F7F3F3F3F7F3F3F3F7F3F3524B769A769A769A769A769A769A769A
%769A769A769A9AF8F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F37D52FD19FF
%7DF87D522727FD05F827A8FD15FF7DF8F8A8FFFFFFA827FD11F352F82075
%9A7576759A7576759A7576759A7576756E6F44F8FD11F37D27FD18FF5227
%FF527DFFA8A8A852FD04F87DFD14FF52F8F8A8FFFFFFA852F3F3F7F3F3F3
%F7F3F3F3F7F3F3F3F7F3F3A84ABA6E6E445175764B7675764B764B756E99
%98BABABAF8F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F37D52FD18FFF8FF27
%F8F827F852A8FFFFA827F8F852FD13FF7DF8F8FD04FFA827FD11F37D20FD
%04BA92984A6E4A6E6E9892FD05BA926E2027FD11F37D27FD17FF277D27FD
%07F827A8FFFF52F8F852FD12FF52F8F8FD04FFA827F7F3F3F3F7F3F3F3F7
%F3F3F3F7F3F3F3F7A8F84B44744A98FD0ABA924A2051767627F3F3F3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F37D27FD17FF27A827FD08F852FFFFFF7DF8F8
%A8FD11FF7DF8F8FD04FFA827FD11F3274B9A7576764B4B20FD05BA6E4A20
%75757576756FF8A8FD10F37D27FD16FF7D27FFFFFF7DA852A87D7DA8FFA8
%52527D27F852FD11FF52F8F8FD04FFA827F7F3F3F3F7F3F3F3F7F3F3F3F7
%F3F3F3524B9A76A0769A76A0764B754A4A2776A0769A76A0769A762752F3
%F3F7F3F3F3F7F3F3F3F7F3F3F3F7F37D52FD16FFF8A8FD0AFF7D27FD06F8
%7DFD10FF7DF8F8FD04FFA827FD10F3F875769A759A769A759A769A274B76
%9A759A769A759A769A752052FD0FF3A8F8FD14FFA8F87DFD0FFFA8FD04F8
%27A8FD0EFF52F8F8FD04FF7D27F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7A827
%769A769A769A769A769A7620769A769A769A769A769A769A7627F3F3F3F7
%F3F3F3F7F3F3F3F7F3F3F37DF8FD14FFF87DFD11FFA8FD05F87DFD0DFF7D
%F8F8FD04FFA827FD0FF37D4B9A7576759A7576759A7576F8277576759A75
%76759A7576752752FD0FF37DF8FD13FF2752FD14FF27FD04F87DFD0CFF52
%F8F8FD04FFA852F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3209AA0769A76A0
%769A76A076524B76769A76A0769A76A0767527A8F3F3F3F7F3F3F3F7F3F3
%F3F7F3F3F37DF8FD12FFA827FD14FFA8FFA827F8F8F8A8FD0BFF7DF8F8FD
%04FFA827FD10F37DF827264B274B274B202027F35220204B274B274B2027
%27527DFD10F37DF8FD12FF277DFFFFA8FD11FFA8F87DFF7DF8F8F8FD0BFF
%52F8F8FD04FFA827F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3A87D7D
%52527DA87DF3F7F3A8A87DA87DA87DF3F3F3F7F3F3F3F7F3F3F3F7F3F3F3
%F7F3F3F3F7F37DF8FD11FF7D27A827F8F852FD11FF27F852A87DF8F87DFD
%0AFF7DF8F8FD04FFA827FD3AF37DF8FD11FFF87DFD05F8FD11FF52F8F827
%A827F852FD0AFF52F8F8FD04FFA827F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3
%F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7
%F3F3F3F7F3F3F3F7F3F3F3F7F37DF8FD10FFA827FF272752277DFD11FFA8
%FD04F827F8F8FD0AFF7DF8F8FD04FFA827FD08F3A8F3F3A8F3F3F3A8F3A8
%A8F3A8F3F3A8F37DA8FD04F37DA87DA8FD04F37DA8F3F3A8F3F3F3A8FD0A
%F3A8F8FD10FF5252FFA8FD0CFF7D52FD07FFA8FD07F87DFD09FF52F8F8FD
%04FF7D27F3F3F7F3F3F3F7F37D27F87DF3F3F75227F8F7F37D27F8A8F3A8
%FD06F87DA8FD06F87DF3A8277DF3F75252A8F7F3F3F3F7F3F3F37DF8FD10
%FFF8A8FD0EFFF8F827FD07FF7DFD06F87DFD09FF7DF8F8FD04FFA827FD08
%F37D277DF8A8F37DF8A8F8F3F37D27277DF3F3F87D7D5252277DF3F87D7D
%5252277D7DF852275252272727A8FD07F37DF8FD0FFFA827FD06FF52FD07
%FF7DF8F8F852FD07FF7DFD05F852FD09FF52F8F8FD04FFA852F3F3F7F3F3
%F3F7F37D52277DF852277D52F8F7F37D5227A8F3F3F87D277D527D7DF3F8
%7D277D527D7DF37D277D27277DF8A8F7F3F3F3F7F3F3F37DF8FD10FF7DFF
%FFA8A8FFFF7DFD08FF7DF8F8F8FD09FF27F8F8F852FD09FF7DF8F8FD04FF
%A827FD08F37D2727F87D2752F87DF8F3F37D27277DF3F3F8522727277DF3
%F3F8522727277DF3F3F352275252F8A8FD09F37DF8FD13FF277DFFFF52FF
%FFFFA8FD05FF52F8F8A8FD08FFA852F8F827FD09FF52F8F8FD04FFA827F7
%F3F3F3F7F3F3F37D522752F87DF85252F8F3F37D52277DF7F3F87D527DF8
%F3F7F3F87D527DF8F3F7F3F3F3277DF8A8F7F3F3F3F7F3F3F3F7F352F8FD
%10FF7D2752FD04FF27FFFF7DF87DFD05FFF8F852FFFFFFA82727FD04FF7D
%F852FD09FF7DF8F8FD04FFA827FD08F37D27277D7DF8A85252F8F3F37D27
%277DF3F3F8522727277DF3F3F8522727277DFD04F35252F8FD0BF352F8FD
%11FFA8A87DFFFF7D27FFA87DA8FD06FF52F87DFFFFFF7DF8F8F8A87D7DF8
%F87DFD09FF52F8F8FD04FFA827F7F3F3F3F7F3F3F37D5227A8F7FFF37D52
%F8F3F37D5227A8F7F3F87D52F3F3F3F7F3F87D52F3F3F3F7F3F3F3527DF8
%F3F7F3F3F3F7F3A8FFF7F352F8FD0EFF7DFD07FF27A8FD0AFFA8A8FD04FF
%52FD04F852F8F852FD0AFF7DF8F8FD04FFA827FD08F37D27277DF3F3F352
%52F8F3F37D27277DF3F3F85252FD05F3F85252FD07F35252F8FD07F3A827
%A8F352F8FD0DFF52A8FD05FF7DF8A8FD08FF52FD08FF52FD07F8FD0BFF52
%F8F8FD04FF7D27F3F3F7F3F3F3F7F37D27F87DF3F3F752F8F8F7F37D27F8
%A8F3A8F8F852F3F7F3F3A8F8F852F3F7F3F3F3F7F35227F8F3F3F3F7F3F3
%FF7D7D7DF352F8FD0DFF52FD05FFA8F8A8FD09FF52A8FD06FF7DFD07F8A8
%FD0BFF7DF8F8FD04FF7D27FD08F3A8F3F37DF3F3F37DF3F3A8F3A8F3F3A8
%F37DF3F3A8FD04F37DF3F3A8FD07F3A8F3A8A8FD05F3A8A8A852F352F8FD
%0DFF52FD05FF277DFD08FF527DFD08FF52FD06F852FD0CFF52F8F8FD04FF
%5252F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3
%F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F3F7F3F3F37DFF52F3
%52F8FD0CFF7DA8FFA827FFFFA87DA8A8FD07FF5227FD07FF2727F82752F8
%27FD0DFF7DF8F8FD04FF7DF8F37D27277DA8FD30F3A8FFFF5252F8FD0CFF
%7DA8FD08FF52527DA8FD05FF527DFD05FFA8F8A8A8A8F8F87DFD0DFF52F8
%F8FD04FFA8F827FD34F827277DFF52F852FD0CFF7DA8FFFF52277DFD04FF
%7D52FD0FFF525227F827FD0EFF7DF8F8FD05FF527D7DA85252527D52527D
%A87DA87D7D5252FD0427527D5252527D525252275252527D5252527D5252
%527D5252527D527D7DA87DA87DA827A8A827A8FD0CFFA87DFFFFA8527D27
%7DA8FD04FFF87DFD0CFF7D7DA852F8A8FD0DFF52F8F8FD3DFFA852FF7D52
%FD0CFFA87DFD06FF52277DFFFFFF7D52FD0BFFA8F85227A827A8FD0DFF7D
%F8F8FD3EFF527DFF277DFD0BFFA852FFFFFFF87DA8FFA85227A8FFFF2752
%FD0AFF5227FFFF525252FD0DFF52F8F8FD3DFFA8A827FFFF27A8FD0BFF7D
%FFFFFFF8F82752FFFFA8277DFFFF7DFFA87DFD08FF277DFFFF527DFD0DFF
%7DF8F8FD3CFF7D7D27F87DFFFF27FD0BFF52FFFFFF525227F8F8527D7DF8
%277DFFFF52A8FD05FFA8A8F8F8A8FFA8F852FD0DFF52F8F8FD3BFF7DF8FF
%FF7D52FFFFA852FD0AFF52FD04FF527D5227FD05F8A8FFFFF8FD05FF27A8
%FD05FF27F8FD0EFF7DF8F8FD39FFA827A8A852FD05FF7D27FD0AFF27FFFF
%A852FFA87D527D7DA8A8FFFFFF527DFD04FF7DF852FFFFFF7DF8F87DFD0E
%FF52F8F8FD38FFA827527DFF7DFD05FFA827FD0AFF7DFFFFA827F8527DA8
%FD06FF7D27FD05FF27F8272727F8F827A8FD0FFF7DF8F8FD38FFA827FF52
%FFFFFF7DFFFFFF7D27FD0AFFA8FD04FF7D272752FD05FFA827A8FD04FF27
%27FFA87D527DA8FD11FF52F8F8FD39FF52FFA8FFFFFFA8FD04FFF8FD0AFF
%A8FD0DFF7DA8FD04FF52F8A8FD17FF7DF8F8FD39FF27FD05FFA8FD04FFF8
%FD0AFF27FD11FFA827F8A8FD18FF52F8F8FD39FFF8A8FD09FFF8FD0AFFA8
%52FD0FFF5227F8A8FD19FF7DF8F8FD39FF2727FD09FF277DFD0AFF5227FD
%0BFFA852F8F8F8A8FD1AFF52F8F8FD3AFF277DFD08FF27A8FD0BFFA82752
%52FD04A87D5252F8275252F8FD1CFF7DF8F8FD3AFFA827FD08FF2727FD0D
%FFA8F8FD0427527D7DA8FFFF2727FD1CFF52F852FD3BFF27FD08FF2727FD
%0DFF7DF8FD08FF7DF8F827FD1CFF7DF827FD3BFF27A8FD07FF2752FD0CFF
%A852F8FD06FFA827F8F8F827FD1CFF52F852FD3BFF7D52FD07FF27FD0AFF
%A85227F827F8FD05FF52FD05F827FD1CFF7DF827FD3BFFA8F8FD05FF7D27
%FFA87D52FD06FF7D277D52F8277DFFFFFFA827FD07F8FD1CFF52F827FD3C
%FF277DFFFFA82752FF7DF8F8F827FD05FFF8A87D7D52FFA8A8FF7DFD09F8
%A8FD1BFF7DF8F8FD3CFF7DF8527D2752FF7DFD06F8A8FFFF7DFD04F852FF
%7DF827FD0AF827FD1BFF52F8F8FD3DFF7DF8F827FF7DFD08F8A8FF52F827
%2727A8FF27FD04F85252FD06A8FD1CFF7DF8F8FD41FF7DFD08F87D7DFF7D
%FD06FF27277D7DFD25FF52F8F8A8FD40FF27FD05F87DA8FD34FF5227F8A8
%FD3FFFA8F8F8F852A8FD37FFF82727FD7CFFA8F827F8FD7CFFA8F827F8FD
%7DFF7D27F827277D527D527D527D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D7DA87DA8A8FD05FFA8A87DA87DA8
%7DFD25FF52F87D275227522752FD0FF85227522752275227522752275227
%522752275227522752275227522752275227522752275227522752275227
%5227522752275227522752275227522727F8F8F85227FD27F827FD7CFF7D
%A8A8FDFCFFFD04FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: AshleyInline
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _AshleyInline AshleyInline
[/_AshleyInline/AshleyInline 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
uu0 O
0 g
800 Ar
2 J 0 j 1 w 2 M []0 d%AI3_Note:0 D
0 XR
227.2202 594.3262 m
252.1953 594.3589 282.1445 595.061 298.377 594.4521 C
303.042 592.5991 299.4238 587.8203 300.2754 584.3989 C
301.2383 577.8008 300.8145 385.5864 301.4795 376.7573 C
300.208 364.5366 302.543 352.4976 300.7559 340.3364 C
300.9736 336.6841 L
300.3887 331.875 300.3428 331.791 301.4258 327.1021 C
297.752 324.4019 292.6123 326.2959 288.2168 325.9868 C
265.2578 325.4185 242.3008 326.9536 219.4453 325.9023 C
216.0059 325.8979 212.5708 327.5088 209.1958 326.0591 C
185.3413 327.5591 51.9844 325.6353 28.1816 326.5269 C
23.5171 328.3804 27.1343 333.1582 26.2837 336.5791 C
25.3213 343.1782 26.6968 332.4438 25.793 339.0679 C
26.5679 347.8149 26.623 356.603 25.9575 365.4326 C
27.229 377.6538 24.3154 564.1353 26.103 576.2969 C
25.9482 582.0854 25.7251 588.4146 27.1504 594.1108 C
55.7729 594.9995 L
80.4292 595.1157 186.7544 594.4512 215.1299 594.7056 C
227.2202 594.3262 L
f/BBAccumRotation (-12.944564) XT
1 g
0 J 4 M217.3965 591.814 m
189.458 591.6411 83.6162 592.375 59.6714 592.8169 C
29.1943 590.5352 33.3716 592.3296 28.6523 591.7871 C
29.5459 578.0605 27.7822 376.7202 28.3125 345.4092 C
28.814 334.9312 28.7139 341.8306 28.1646 331.4282 C
28.9331 329.6533 L
43.877 328.709 168.3115 329.186 183.3535 328.9854 C
191.0132 328.2427 198.6865 328.0317 206.3076 328.6753 C
236.4951 328.0356 266.6465 328.293 296.8496 327.9414 C
300.5547 330.9175 295.6533 331.2642 296.1094 335.3286 C
298.207 342.1309 L
297.3125 355.8569 297.8447 579.1484 298.3955 589.5508 C
297.627 591.3252 L
284.0527 592.1831 246.1914 591.8677 228.0913 591.9541 C
217.3965 591.814 L
f/BBAccumRotation (-12.944564) XT
Uu0 g
2 J 2 M169.3779 463.4824 m
169.4106 438.5073 170.1128 408.5576 169.5034 392.3257 C
167.6504 387.6606 162.8716 391.2783 159.4507 390.4272 C
152.8521 389.4648 115.291 389.8887 106.4614 389.2231 C
94.2412 390.4946 82.2021 388.1592 70.0405 389.9463 C
49.1035 389.729 L
44.2949 390.3135 44.2104 390.3599 39.5215 389.2769 C
36.8218 392.9512 38.7163 398.0903 38.4063 402.4854 C
37.8379 425.4443 39.373 448.4019 38.3223 471.2573 C
38.3179 474.6963 39.9282 478.1318 38.479 481.5063 C
39.979 505.3618 38.0547 558.6626 38.9468 582.4653 C
40.7998 587.1299 45.5781 583.5127 48.9995 584.3633 C
55.5986 585.3257 62.1484 583.9502 68.7725 584.8535 C
77.5195 584.0786 86.3076 584.0239 95.1372 584.6895 C
107.3579 583.418 139.187 586.3315 151.3486 584.5439 C
157.1372 584.6987 163.4658 584.9219 169.1626 583.4966 C
170.0513 554.8735 L
170.1675 530.2178 169.5024 503.9478 169.7568 475.5728 C
169.3779 463.4824 L
f/BBAccumRotation (-8.232175) XT
0.87 g
0 J 4 M166.8652 473.3062 m
166.6929 501.2446 167.4263 527.0308 167.8682 550.9756 C
165.5869 581.4526 167.3813 577.2754 166.8384 581.9946 C
153.1123 581.1011 106.4243 582.8647 75.1133 582.3345 C
64.6362 581.833 54.2505 581.9331 43.8481 582.4824 C
42.0732 581.7139 L
41.1289 566.77 41.6055 522.3911 41.4048 507.3486 C
40.6621 499.6895 40.4517 492.0156 41.0947 484.395 C
40.4556 454.207 40.7129 424.0566 40.3608 393.853 C
43.3369 390.1479 43.6836 395.0493 47.748 394.5938 C
54.5503 392.4951 L
68.2769 393.3901 154.2002 392.8579 164.6025 392.3071 C
166.3765 393.0762 L
167.2349 406.6504 166.9194 444.5112 167.0059 462.6113 C
166.8652 473.3062 L
f/BBAccumRotation (-8.232175) XT
Uu0 g
2 J 2 M223.3716 491.9629 m
222.7417 492.9116 L
219.5806 490.8828 219.4912 486.3838 215.4648 485.3511 C
213.5308 485.3315 212.4531 486.6982 210.8911 487.0972 C
206.8989 483.5938 203.729 478.0762 197.8477 477.4175 C
194.4585 479.3345 190.4399 482.4053 191.1606 486.9814 C
191.4048 490.6274 193.146 493.1484 194.9663 495.6548 C
194.5596 497.0918 193.1953 497.4502 191.9712 497.082 C
189.6851 498.3643 186.9663 500.147 186.6177 503.0913 C
187.9839 514.9268 195.1455 523.9478 203.4893 531.7036 C
205.4258 533.1597 208.584 533.9575 210.9873 532.2402 C
213.5728 530.814 211.4111 527.2275 210.8149 525.2954 C
209.269 522.1182 206.6196 519.1646 204.5615 516.7056 C
204.0083 515.9971 203.52 517.0396 203.064 517.4199 C
202.4731 517.9497 202.397 519.1968 201.3311 519.0015 C
198.9814 516.5215 197.7119 513.2876 196.2612 510.1733 C
195.3486 508.0996 194.5957 506.4043 195.4585 504.1772 C
199.7461 505.0757 203.9219 512.9346 207.2256 507.5459 C
204.0933 500.583 201.064 493.7241 199.5234 485.7007 C
200.1372 485.0835 199.3057 483.6094 200.7817 483.8042 C
204.2593 485.7695 206.9321 488.2261 208.8477 491.2046 C
207.7319 504.3643 215.9609 514.6064 224.3057 522.978 C
225.4922 524.1748 227.6631 524.7622 228.4092 522.9692 C
230.3145 517.1641 223.5991 513.8008 221.1191 509.252 C
218.2524 504.6177 215.8882 499.019 215.7964 493.0845 C
217.0425 492.5454 217.6147 493.9487 218.168 494.6582 C
221.772 500.7031 226.543 506.0205 227.7578 513.6577 C
228.5752 515.6685 231.1377 514.1235 232.2568 513.5693 C
234.5396 510.644 232.106 505.7163 231.2061 502.2856 C
230.3765 501.6323 230.5156 500.2905 230.1733 499.21 C
230.8032 498.2617 L
236.0063 503.0801 238.3647 509.665 241.3379 515.8384 C
238.1709 518.8604 240.1157 524.0098 241.2837 527.7559 C
243.0508 530.8062 245.1235 533.5483 247.8516 535.8706 C
249.7451 535.4878 248.6748 533.2407 249.106 531.9219 C
248.7021 527.2817 246.4438 523.2227 246.0796 518.9854 C
248.1914 517.6553 250.5571 516.7656 252.2266 514.8682 C
254.5293 510.4204 254.123 504.9595 252.1167 500.1108 C
249.1919 498.2378 247.4302 493.5854 243.1865 494.5254 C
241.8721 496.5571 239.7866 499.0317 241.3867 501.8691 C
244.9277 504.561 247.3438 508.3833 246.9351 513.064 C
246.4634 513.7759 245.7402 515.2769 244.7271 514.3315 C
241.6309 512.6177 242.1899 508.2759 240.1328 505.8184 C
235.7017 500.5557 234.6816 492.4683 227.3906 489.5088 C
F/BBAccumRotation (-0.199533) XT
225.4229 561.7104 m
225.1841 560.2056 223.7041 558.6216 222.7783 557.126 C
221.165 558.5293 223.2788 560.0825 222.7358 561.4595 C
223.2842 562.5415 224.5288 562.187 225.4229 561.7104 C
f/BBAccumRotation (-0.370656) XT
236.3223 555.3164 m
235.479 550.5913 231.0103 556.6465 229.4673 553.231 C
232.3242 552.25 236.665 550.8647 236.9277 546.8774 C
236.4082 543.5396 233.8477 541.728 231.1577 540.9165 C
229.0342 541.0078 226.333 541.4971 224.6353 543.0195 C
223.9897 544.1343 224.3872 546.2676 225.5723 546.5415 C
227.1563 545.0625 229.6655 544.519 231.6362 545.48 C
232.0737 546.6055 L
229.3618 548.7383 223.9048 548.9165 224.3828 553.4795 C
225.0278 556.2515 228.0063 557.4688 230.4663 558.0234 C
232.4565 557.8115 236.1113 557.7729 236.3223 555.3164 C
f/BBAccumRotation (-0.370656) XT
219.2153 554.6245 m
217.7886 552.2861 210.9517 555.2451 212.9868 549.7056 C
213.2368 547.0176 213.6733 544.4736 213.3638 541.7876 C
211.7988 541.3164 210.2397 540.9722 208.6538 541.8911 C
207.9888 545.7324 209.6313 549.6274 207.9429 553.3926 C
205.9961 554.4946 203.1733 552.7847 202.0249 554.8286 C
201.9414 555.7251 201.7095 556.4619 202.1494 557.3706 C
207.5977 558.0591 213.1279 558.0693 218.5894 557.458 C
219.2153 554.6245 L
f/BBAccumRotation (-0.370656) XT
197.7549 548.2847 m
197.4116 545.9575 198.3608 543.7324 197.6738 541.4087 C
195.9541 542.2065 192.6831 539.6782 192.6519 542.9292 C
192.1709 546.915 192.8784 550.9575 192.9819 554.8896 C
192.4507 555.7437 192.3672 556.6392 192.7314 557.5771 C
194.2622 557.6289 195.8667 558.647 197.4409 557.4741 C
198.8604 554.4609 197.0146 551.3794 197.7549 548.2847 C
f/BBAccumRotation (-0.370656) XT
280.1201 528.9536 m
279.0918 517.1729 273.6025 507.2798 270.2637 496.4595 C
272.5352 495.5068 272.6465 492.4058 270.8047 491.0122 C
269.6543 487.7554 267.3828 485.2583 265.0254 482.7388 C
256.8691 488.0825 266.8691 495.9136 266.332 503.4126 C
267.1875 503.979 267.0313 505.2422 267.2852 506.0938 C
266.6563 507.0425 L
263.9526 504.8379 263.353 501.2646 260.1685 499.3218 C
257.6421 499.4219 257.2549 502.5796 255.2847 503.5942 C
255.5308 508.2656 257.0264 513.6294 257.7617 517.8735 C
259.4854 519.7012 259.729 522.936 259.6719 525.2886 C
259.3037 526.5117 258.0791 526.5547 257.7026 527.7393 C
259.4814 528.8169 261.9541 529.876 264.4932 528.8296 C
266.3027 525.5898 L
265.249 520.3833 264.3691 515.0186 262.4014 510.3662 C
263.0308 509.4175 L
266.5303 510.8857 266.4375 515.5029 268.8887 518.0864 C
271.0957 523.3071 273.8047 528.5889 275.3154 533.6206 C
277.8262 534.2627 279.7539 531.2036 280.1201 528.9536 C
f/BBAccumRotation (-0.199533) XT
Uu1 g
0 J 4 M203.688 409.041 m
204.4751 417.1396 207.3599 428.0117 213.1206 433.6597 c
215.623 436.1133 217.7944 438.3569 219.6152 441.4048 c
222.1123 445.5854 222.7051 452.5498 227.8804 454.5352 c
233.8008 456.8066 237.7202 453.9253 243.0239 452.0303 c
247.0166 450.6035 249.6626 448.8086 252.8354 446.3633 c
255.6611 444.1851 256.3242 440.8081 258.8125 438.3442 c
260.6611 436.5146 262.9497 435.7271 264.8359 434.0903 c
266.8633 432.3296 270.4492 429.1938 271.5918 426.8447 c
273.1602 423.6177 272.8398 420.084 274.6885 416.8135 c
277.1699 412.4229 277.0645 410.9907 274.4219 407.021 c
272.125 403.5693 271.6104 399.9971 269.5732 396.4741 c
268.5879 394.772 267.8301 392.8701 266.2842 391.5889 c
265.4219 390.8716 264.3423 390.6704 263.7603 389.9712 C
267.2314 390.3027 268.3398 381.8408 267.3965 379.2964 c
266.4805 376.8242 262.0142 373.4238 259.626 372.6548 c
257.9526 372.1143 255.8711 372.062 254.2134 372.4951 c
252.6855 372.8955 251.6958 374.4272 249.8682 374.0405 c
247.1313 373.4629 244.9414 369.1572 242.7388 367.2783 c
239.7256 364.7056 236.832 364.1147 235.7314 359.9702 c
234.5723 355.6055 232.7051 345.1597 238.4531 342.5254 C
235.0762 343.272 198.5767 340.5688 197.7778 340.1895 c
195.6855 339.1968 194.1631 341.8296 195.6953 344.9463 C
193.7407 342.2021 172.1323 333.168 170.8032 334.4526 c
169.5112 335.7007 167.4868 338.1001 166.6675 339.5508 c
166.2021 340.3765 166.2598 341.5347 165.7578 342.3496 c
165.02 343.5464 164.3936 343.3979 163.5278 344.4268 c
161.6992 346.5986 160.8569 350.4106 159.6665 353.0894 c
157.3535 358.2935 153.0884 362.647 151.9668 368.3257 c
151.2354 372.0405 151.5249 374.3374 154.1899 376.6729 c
155.6572 377.9595 158.5913 379.7607 159.2114 381.5332 C
160.7993 381.4658 162.0122 379.8213 163.6265 379.5737 c
165.043 379.356 167.2588 379.9624 168.6831 380.1997 C
167.4146 380.8794 166.3882 382.7017 165.5718 383.917 c
162.936 387.8418 159.8428 391.2383 157.9014 395.6489 c
156.1313 399.6689 159.3198 399.2002 159.8208 402.8081 C
162.1792 398.9302 163.0859 394.1992 165.6006 390.2173 c
168.0176 386.3931 171.5659 383.3989 173.6372 379.2983 c
177.5737 371.4995 173.7256 362.7002 175.9897 354.3774 c
177.04 350.5156 179.7422 349.3569 182.7534 347.2217 c
185.1084 345.5513 187.0786 343.5498 190.2476 344.0151 c
193.4736 344.4888 195.4663 349.7065 198.3101 349.2593 c
199.3325 349.0977 190.6938 345.0142 191.7178 344.5713 c
193.0483 343.9976 194.6118 344.7563 196.0142 343.7915 C
197.2939 347.918 198.5581 350.9023 202.3872 352.9111 c
205.3237 354.4526 210.4414 356.2471 210.2217 360.4771 C
199.4346 358.7817 199.2534 374.4092 199.0347 383.2104 c
198.9668 385.9424 198.7007 388.771 198.5996 391.5659 c
198.4849 394.7485 199.8745 393.5288 200.4424 396.8013 c
201.0522 400.3115 201.3027 406.3706 203.1523 408.9653 c
F/BBAccumRotation (-6.790284) XT
0 0 0 0 k
162.9102 395.4082 m
162.377 396.9951 161.6104 398.6777 161.376 400.3125 c
161.1572 401.8447 161.6851 402.2827 160.0322 403.252 c
158.3794 404.2222 156.3994 400.9893 157.2983 397.0708 c
157.6709 395.4438 158.3228 393.3555 159.4502 392.2368 c
160.4692 391.2266 162.144 390.9302 163.2207 389.981 c
F/BBAccumRotation (-6.606819) XT
0 g
2 J 2 M245.6123 454.3564 m
245.606 454.3115 245.6011 454.2671 245.5967 454.2222 C
242.9604 453.1533 239.939 454.2432 237.2778 455.0972 C
231.8394 455.8867 227.5317 453.0254 223.6128 450.3003 C
219.7437 445.7798 220.5063 438.9219 214.5796 435.9136 C
209.96 429.4438 205.9541 422.1172 204.5005 414.4146 C
204.4688 410.875 205.3608 414.1255 205.7622 414.1826 C
208.2803 423.0601 212.6289 432.8936 220.2656 439.1748 C
221.7427 443.8086 223.6934 450.3125 229.124 451.8979 C
239.0449 451.8638 248.8921 448.8687 256.0737 440.9492 C
254.2749 439.1797 251.5757 441.4619 249.1304 440.7891 C
247.1221 440.5059 244.7632 440.3779 244.1348 438.4453 C
247.1807 437.7681 250.7046 438.3481 253.7153 437.3384 C
258.6323 430.6563 270.2334 429.7524 270.3848 420.8408 C
266.5791 423.7056 263.0498 426.3628 258.9233 429.4688 C
257.7178 429.2988 L
257.1528 427.4976 260.8989 427.084 258.6865 425.3374 C
260.9902 423.5317 259.3101 420.918 260.8555 418.6768 C
263.3809 415.8784 267.5381 414.0063 269.7363 410.9155 C
270.8613 410.7876 272.2461 412.0073 273.0645 410.5664 C
273.8047 408.2114 271.7734 407.2285 270.4727 405.6934 C
269.5889 405.2813 269.0742 406.0283 268.3506 406.2134 C
268.3438 405.3921 268.8867 404.4448 268.2891 403.7456 C
266.166 404.2666 264.9951 406.7642 262.7886 407.8862 C
260.0938 409.5552 L
255.6548 407.6182 259.645 401.7065 254.9697 399.4077 C
257.2026 396.6494 250.4243 392.415 255.9331 392.5776 C
257.5449 395.6733 L
258.6416 395.7466 259.5342 394.6431 260.5845 394.4634 C
260.4946 395.6787 261.4609 396.9639 262.6548 397.2134 C
263.1484 397.2017 263.8955 397.7158 264.3184 397.0386 C
264.4819 395.0142 262.8438 393.5532 262.1865 391.8213 C
260.2739 390.8545 257.5928 393.0161 256.6748 390.2236 C
256.7886 389.4199 L
259.6597 390.8496 262.999 390.4189 265.5088 388.603 C
266.4473 386.8906 266.5859 384.4512 266.3594 382.5757 C
263.6812 376.8711 258.1392 374.041 251.8857 374.7964 C
250.4863 375.1333 249.4209 376.293 249.4229 377.7275 C
250.4019 379.5054 L
247.8447 380.7837 249.3594 377.3086 247.5278 376.6401 C
240.501 364.5864 228.3062 360.4067 214.564 360.5171 C
209.4404 360.5317 203.9331 361.8018 200.6304 366.3359 C
198.8579 370.1836 L
198.3994 366.7583 200.8501 363.9082 203.7217 361.8555 C
205.5098 360.7954 208.3501 360.9922 209.1094 358.5186 C
208.355 357.1826 207.3628 356.96 207.4976 355.4219 C
207.8989 355.479 208.4849 355.6851 208.7598 355.1895 C
208.8838 354.3062 209.2261 353.3311 208.2959 352.666 C
207.5039 352.4731 206.7524 352.5718 206.1738 353.186 C
206.4048 354.4473 L
203.855 352.7769 200.354 352.8979 197.8491 351.1929 C
194.1631 342.4775 L
195.4175 341.4253 196.0977 343.2832 197.3198 343.333 C
199.6675 343.2544 202.4819 345.085 204.3198 343.0903 C
206.3574 343.1724 205.0762 345.5732 205.875 346.5874 C
204.3018 349.0303 207.4424 350.0063 208.5229 351.0601 C
209.1538 350.9434 209.7676 350.9478 210.2432 350.4824 C
211.2808 353.293 209.7778 356.6855 211.4634 359.2598 C
218.9614 358.3916 226.6187 359.8823 234.0181 362.0327 C
234.8438 361.1235 234.8994 360.7231 234.3589 359.6221 C
227.5 355.0889 220.4111 351.0156 213.7354 346.0591 C
211.9038 345.103 211.5527 347.5947 210.9844 348.1279 C
209.7886 346.4438 211.1499 344.0537 209.311 342.5654 C
209.4248 341.7627 L
214.5996 341.3853 219.0166 344.0581 224.1758 344.6631 C
237.6606 344.9268 L
238.3516 345.8442 L
235.6626 350.3809 235.6958 356.5322 236.542 361.5693 C
240.3076 365.3784 244.9155 369.0195 248.3267 373.8857 C
250.2227 374.9727 252.0815 371.9565 254.292 372.2681 C
260.1284 373.0098 266.0127 374.8647 267.791 381.1382 C
268.0039 384.5693 268.2051 388.3677 265.2256 390.6113 C
269.2852 395.814 272.4238 402.6079 276.7891 407.4038 C
277.0059 413.7021 276.5 420.1875 273.7783 425.8276 C
271.873 432.6479 264.7871 435.8271 259.5142 439.7959 C
258.6646 445.8223 252.4966 449.4595 247.8892 452.4971 C
F/BBAccumRotation (-6.790284) XT
157.3325 379.1123 m
155.7578 379.147 154.7261 378.2651 154.1899 376.6729 C
153.3853 374.6055 151.2134 375.9292 150.4214 373.8228 C
151.2769 369.6162 149.6445 364.2759 153.7817 361.2554 C
157.4502 354.7847 156.3198 341.5649 166.2603 343.188 C
169.2368 349.8784 181.1284 351.8125 176.8755 361.2993 C
176.4561 366.6357 175.521 371.9717 175.8203 377.207 C
175.5605 378.6177 174.8521 380.0923 173.2026 381.6069 C
170.9312 384.1265 L
167.457 389.3804 162.2007 393.8228 161.7896 401.1743 C
160.7749 401.9033 161.6143 402.2617 159.8638 403.1045 c
158.1147 403.9487 157.2065 400.4092 157.2969 399.2588 c
157.3862 398.1089 157.689 398.0869 Y
157.6479 399.4854 157.3887 400.895 158.4512 402.1938 C
159.3218 403.0415 159.7471 401.7729 160.377 401.5562 C
163.2944 392.4775 168.3115 385.1733 174.4058 378.8716 C
173.2764 371.647 176.0503 364.0176 174.96 356.8047 C
177.3091 349.8032 167.7354 350.5298 166.0005 345.2412 C
156.416 345.3638 158.7407 357.5688 154.4194 363.1807 C
151.5645 366.2031 151.145 371.2837 152.7295 374.5977 C
153.562 375.3037 154.2192 374.2402 155.0405 374.0884 C
156.1084 372.4351 155.3438 369.6108 157.1021 369.2173 C
156.6611 372.064 154.9888 373.8564 154.9063 377.0391 C
156.0576 378.709 L
158.9072 378.5093 159.3618 375.2383 161.2002 373.5864 C
161.8125 375.2046 160.0142 376.0991 159.5244 377.3047 C
158.0874 377.3794 157.9565 379.0469 158.2368 379.8687 C
160.665 384.7485 164.3369 376.9937 167.4761 379.1162 C
164.0054 383.0874 162.4282 388.6787 158.7266 392.4438 C
160.0293 388.8154 162.2793 385.9312 164.1338 382.7026 C
163.7632 382.1489 163.5967 381.3672 162.8525 381.417 C
161.8022 382.4785 160.854 382.2061 159.7358 382.1099 c
157.8271 381.9448 157.7241 380.3696 157.3325 379.1123 C
f/BBAccumRotation (-6.606819) XT
223.9429 442.1523 m
224.9517 441.3931 225.7583 442.9404 226.6421 443.353 C
227.8535 440.5732 231.2031 442.9717 233.0654 441.3906 C
235.4761 441.7305 237.3467 442.1177 239.2051 441.4375 C
241.4717 441.3472 242.7881 442.7622 244.6597 443.436 C
243.7686 445.9746 240.0962 445.8657 237.9526 447.4077 C
235.9517 451.4272 231.5791 444.6641 231.0146 450.1157 C
227.9424 448.6582 224.0068 446.0542 223.9429 442.1523 C
f/BBAccumRotation (-6.790284) XT
210.5991 423.4692 m
211.0332 422.4243 210.2441 420.7559 211.8555 420.3696 C
214.9233 422.4409 219.3149 419.7822 221.729 422.9917 C
222.0317 425.2056 220.2954 426.4761 218.6958 427.0703 C
215.3037 427.002 212.606 425.8013 210.5991 423.4692 C
f/BBAccumRotation (-6.790284) XT
238.3003 415.9048 m
239.9087 413.7964 242.0176 411.9219 243.2813 409.6416 C
244.2031 408.0503 244.0474 404.2178 246.7739 405.2173 C
250.6284 407.5234 247.4429 410.6382 247.2476 413.4795 C
245.6216 415.4224 244.9312 418.2744 242.3228 419.3408 C
239.5698 419.9761 239.3984 417.4121 238.3003 415.9048 C
f/BBAccumRotation (-6.790284) XT
220.2261 416.2227 m
220.1162 412.6436 221.1548 408.7739 218.8315 405.7822 C
217.1143 401.9746 209.3604 400.8809 212.9028 395.521 C
215.2495 395.4434 213.0454 397.9995 214.0566 398.9609 C
216.4717 402.1714 221.123 404.0571 221.3032 408.5898 C
221.0293 416.3364 L
220.2261 416.2227 L
f/BBAccumRotation (-6.790284) XT
211.8979 411.3599 m
211.9546 410.959 211.9189 410.3384 212.4692 410.2119 C
213.1357 410.4282 214.1157 410.1567 214.4214 410.897 C
214.291 411.8208 214.3506 412.853 213.2783 413.1943 C
212.3301 412.6504 212.1582 412.4209 211.8979 411.3599 C
f/BBAccumRotation (-6.790284) XT
206.042 409.3037 m
206.5654 407.0425 209.8315 407.709 211.7173 406.8276 C
212.1196 406.8838 L
210.2578 408.4653 208.2798 409.4155 206.042 409.3037 C
f/BBAccumRotation (-6.790284) XT
158.4683 393.2134 m
159.4014 394.5103 158.2065 395.9067 157.9473 397.3169 C
156.9624 396.0454 158.209 394.624 158.4683 393.2134 C
f/BBAccumRotation (-6.606819) XT
226.0059 407.2036 m
228.3862 406.311 229.9219 408.4946 231.8623 409.2593 C
230.0991 411.5928 227.3906 408.1372 226.0059 407.2036 C
f/BBAccumRotation (-6.790284) XT
237.3535 399.3809 m
238.2373 399.5054 239.27 399.4468 239.6509 400.5244 C
239.9629 401.7974 238.5464 402.5405 237.7041 402.708 C
235.9878 402.3843 236.7017 400.231 237.3535 399.3809 C
f/BBAccumRotation (-6.790284) XT
203.3794 396.2266 m
203.3716 395.4067 203.7539 394.1484 204.8115 394.7896 C
205.8438 394.73 207.394 395.3589 207.0513 396.335 C
206.1064 397.2261 204.2988 396.9692 203.3794 396.2266 C
f/BBAccumRotation (-6.790284) XT
232.9341 398.7578 m
234.6519 396.7466 236.7222 395.7271 238.6055 393.4111 C
239.811 393.5815 L
239.0752 396.4688 235.335 396.8418 233.7378 398.8706 C
232.9341 398.7578 L
f/BBAccumRotation (-6.790284) XT
216.5752 395.6294 m
217.9551 393.6929 220.1553 392.0366 222.1328 391.0859 C
222.6626 391.6934 223.603 391.417 224.0288 392.1738 C
223.8022 393.7803 L
220.5903 390.9907 219.4556 395.5449 216.5752 395.6294 C
f/BBAccumRotation (-6.790284) XT
205.2646 391.5747 m
205.4067 390.5718 205.9219 389.8237 206.8101 389.3354 C
209.9814 391.5444 212.5972 388.1025 215.3555 386.8525 C
223.7827 382.3047 L
224.981 381.6548 223.8359 380.4692 223.3188 379.7808 C
218.0918 379.6577 213.8398 383.0742 209.0972 384.7402 C
208.6216 385.2061 207.7617 385.4937 207.6655 386.1772 C
206.4033 386.4092 206.8423 384.7505 206.7432 383.9985 C
207.0215 379.1206 212.1616 378.125 215.6235 376.2368 C
220.3716 377.439 226.4404 376.5327 229.8604 379.8843 C
228.7739 381.7803 225.7559 381.9683 223.7261 382.7065 C
219.0229 387.5747 212.6846 388.9351 207.2168 392.2607 C
206.5049 392.0781 205.5645 392.356 205.2646 391.5747 C
f/BBAccumRotation (-6.790284) XT
226.77 388.8481 m
228.4985 386.7573 229.6191 383.0469 232.6772 383.1499 C
231.8784 385.9067 227.5566 386.0391 228.3872 390.3296 C
227.6069 390.6299 227.0039 390.5444 226.3779 390.0464 C
226.4346 389.6445 227.2231 389.1172 226.77 388.8481 C
f/BBAccumRotation (-6.790284) XT
164.9297 368.8472 m
166.147 369.6831 166.0801 371.1587 165.436 372.4404 C
165.3857 371.5674 164.6201 370.0269 164.9297 368.8472 C
f/BBAccumRotation (-6.606819) XT
254.8877 385.4644 m
254.9419 383.6294 257.3081 384.2891 257.7515 382.5908 C
256.8701 380.1309 254.3477 382.0283 253.0444 381.1074 C
253.7129 379.2754 255.6362 380.1606 256.9443 379.6079 C
257.9316 379.8696 259.0796 380.4419 259.1274 381.5552 C
259.4473 383.6489 255.5869 384.8657 258.3906 386.7788 C
260.8716 388.0708 263.0718 386.1274 264.0674 384.3008 C
264.6641 384.9995 264.2939 386.1763 263.7266 386.7114 C
262.5586 388.3086 260.917 387.7485 259.4253 388.1528 C
257.2227 388.3755 256.1074 386.9878 254.8877 385.4644 C
f/BBAccumRotation (-6.790284) XT
1 g
209.6074 381.1235 m
210.7183 379.6426 213.0215 377.8364 215.3403 378.2456 C
214.0244 380.314 211.6094 380.5874 209.6074 381.1235 C
f/BBAccumRotation (-6.790284) XT
0 g
234.0435 376.3779 m
228.8672 369.501 L
233.7778 372.4468 236.3926 377.7329 237.6118 383.0264 C
234.9937 381.8379 235.6763 378.4517 234.0435 376.3779 C
f/BBAccumRotation (-6.790284) XT
206.2139 376.1387 m
206.3833 374.9326 L
209.4028 372.4087 213.1816 370.8936 216.938 372.7339 C
217.2822 373.1924 L
213.3174 372.8379 209.9126 374.6118 206.5586 376.5977 C
206.2139 376.1387 L
f/BBAccumRotation (-6.790284) XT
167.4248 338.4434 m
167.6953 337.8916 167.0166 337.3647 167.5552 336.7749 C
169.2485 337.4702 171.8257 338.335 173.8423 337.1719 C
187.562 342.2012 L
188.5 341.5747 189.5234 342.9883 190.5127 342.3354 C
188.5298 345.9492 184.7534 348.021 181.3877 350.4019 C
176.4224 350.1479 173.9541 345.7681 170.624 342.9395 C
167.4248 338.4434 L
f/BBAccumRotation (-6.606819) XT
1 g
198.3032 347.9775 m
200.3979 347.6592 203.21 348.0562 205.1338 348.9429 C
205.417 350.416 203.8779 349.7075 203.3003 350.3218 C
201.5591 349.585 198.3086 350.8472 198.3032 347.9775 C
f/BBAccumRotation (-6.790284) XT
Uu0 0 0 1 k
0 J 4 M135.1777 462.5518 m
133.2036 460.2979 131.6167 458.8833 129.3481 457.5391 C
129.0498 452.3848 128.751 447.2295 128.4517 442.0757 C
129.8511 436.6338 136.0156 437.2261 130.0088 428.4985 C
125.3696 427.6318 110.6548 425.0122 105.3081 427.5439 C
103.8682 428.4751 103.7642 429.8867 102.8867 431.3564 C
102.7041 431.2666 102.5239 431.1772 102.3423 431.0874 C
101.8247 429.3149 100.9214 428.0073 99.3364 427.3042 C
93.6265 425.7319 80.0649 426.2334 76.0063 428.7852 C
73.981 435.0757 75.9399 437.9761 79.3306 441.522 C
79.4351 445.1851 79.3799 451.7852 77.77 454.2852 C
76.73 455.4277 75.064 455.3354 73.7095 456.2056 c
71.1602 457.8442 65.3662 464.0601 67.2627 468.7231 C
68.4453 469.9829 69.6284 471.2441 70.8105 472.5034 C
68.1738 477.5938 70.4038 479.8433 73.311 483.3452 C
72.4097 492.4106 71.4487 500.8149 76.1514 507.2104 c
77.6162 509.2046 84.0469 513.1421 84.6021 514.4941 C
83.9941 519.1104 83.3843 523.7275 82.7754 528.3438 C
81.1055 540.6948 86.4053 548.5337 92.6772 553.2578 C
105.4907 552.4658 103.7798 540.5342 105.5728 528.7651 C
105.5576 525.8716 105.5425 522.9771 105.5269 520.0825 C
105.8926 519.522 105.8286 519.6436 106.3369 519.2632 C
106.5195 519.5337 106.7026 519.8047 106.8848 520.0752 C
107.2651 523.6899 107.6465 527.3071 108.0269 530.9233 C
110.2354 539.1187 112.4595 548.6733 120.3477 551.2104 c
122.1738 551.7988 124.563 552.3247 126.5889 551.1777 c
139.7788 543.7114 122.9438 517.5981 125.5708 512.6484 C
131.3052 510.2559 137.6226 499.0288 136.0332 489.7969 C
135.2944 486.9976 134.5557 484.1968 133.8164 481.3965 C
134.3574 480.9414 134.8975 480.4858 135.438 480.0313 C
136.4712 478.8457 138.2632 475.2139 135.5347 472.9639 C
137.0293 470.2393 141.644 472.5464 135.1777 462.5518 C
f/BBAccumRotation (-0.005302) XT
0.2274 0.4941 0.4588 0.0941 0.6941 0.4157 0.3647 Xa
93.2075 550.8125 m
81.2588 543.665 85.8535 527.4937 87.0386 513.3955 C
79.499 509.3677 71.9185 501.3052 74.6963 488.7651 C
74.96 487.3174 75.2236 485.8672 75.4873 484.4199 C
76.7725 482.7612 82.9634 483.1284 84.7007 481.9282 c
86.791 480.4829 86.3281 476.8462 88.1948 475.397 C
90.9473 473.8047 96.2979 473.6807 99.8511 473.1641 C
100.3994 473.5874 100.7241 473.3486 101.0879 473.8896 C
100.9849 474.314 100.3403 474.2554 99.7949 475.0044 C
99.4102 475.5332 100.0732 475.894 100.7163 475.687 C
104.8228 471.8384 105.3242 476.3188 106.9888 476.1064 C
107.71 476.2988 107.7612 475.6411 107.5527 475.3076 C
106.5264 473.668 105.5981 474.1709 106.3657 473.4009 C
106.5459 473.3091 106.7266 473.2178 106.9072 473.1265 C
110.8091 472.9629 118.2231 473.5679 119.6768 476.0435 C
122.9937 483.4302 123.2827 481.9004 132.1992 483.3047 C
134.7002 498.4624 133.1919 506.0566 121.771 512.6689 C
122.1475 519.0132 137.1846 543.979 124.6782 549.2886 C
114.0767 552.1255 111.1851 534.2715 109.6299 526.0303 c
109.1318 523.3936 109.9805 518.7373 108.2271 517.3535 C
106.2847 516.4521 104.1313 517.4224 103.0757 518.1943 C
103.4492 529.9126 105.2617 550.8218 93.2075 550.8125 C
f/BBAccumRotation (-0.005302) XT
76.2871 481.7012 m
74.9302 481.7085 73.9829 482.2563 72.2051 479.5518 c
69.7231 475.7783 75.5708 468.9717 81.9341 471.9023 C
84.7539 472.9629 85.8774 475.353 84.9551 478.6709 C
83.3306 480.8779 80.1274 481.7227 76.2871 481.7012 C
f/BBAccumRotation (-0.005302) XT
0.0196 0.5961 0.9137 0 1 0.4 0 Xa
86.8271 473.5049 m
82.4243 467.0674 78.709 471.7744 72.9717 470.5933 C
64.8887 468.1396 72.0776 457.8491 77.5132 457 C
77.6035 457.0894 77.6948 457.1797 77.7861 457.2695 C
77.877 460.9878 77.0073 462.5576 76.4692 464.875 C
76.7407 464.9634 77.0127 465.0532 77.2847 465.1431 C
77.5562 465.1411 77.8276 465.1401 78.0991 465.1382 C
79.5405 464.2261 80.9839 463.313 82.4258 462.4014 C
89.4194 459.3174 100.5781 456.6011 110.9004 458.7222 c
117.8442 460.1489 123.4092 464.7954 129.9346 465.6772 C
130.0239 465.4966 130.1133 465.3135 130.2026 465.1328 C
129.79 463.4976 128.9795 462.0313 129.3628 460.2524 C
129.4531 460.2524 129.5435 460.2515 129.6338 460.2515 C
133.3643 461.0439 140.7827 470.5981 133.7637 471.356 C
130.1519 469.6138 124.9175 468.855 121.5522 471.4209 c
120.5986 472.1475 120.9165 473.2637 118.8467 473.0635 C
115.5884 472.4463 112.3276 471.8306 109.0684 471.2153 C
100.9702 469.7944 92.8716 472.458 86.8271 473.5049 C
f/BBAccumRotation (-0.005302) XT
0.2274 0.4941 0.4588 0.0941 0.6941 0.4157 0.3647 Xa
125.8462 462.4419 m
114.6885 453.8745 92.7739 455.938 80.249 461.3267 C
79.3325 458.1978 80.1328 453.6416 80.7373 451.0122 C
84.0786 449.9097 87.4194 448.8057 90.7607 447.7031 C
98.7153 445.9067 124.042 447.4341 126.8779 452.1245 C
126.896 455.561 126.9146 458.9995 126.9326 462.436 C
126.5698 462.4385 126.2075 462.4404 125.8462 462.4419 C
f/BBAccumRotation (-0.005302) XT
124.6636 443.9951 m
116.9077 440.9023 110.7046 440.8804 104.2725 436.7764 C
104.1567 433.46 104.6748 430.2251 106.9448 429.1636 C
111.7954 427.1104 123.2271 428.7832 128.1162 429.8652 C
133.5684 436.4819 128.5298 435.959 126.5444 440.4575 c
126.0381 441.6035 126.4019 443.1875 126.0205 443.9878 C
125.5684 443.9902 125.1147 443.9927 124.6636 443.9951 C
f/BBAccumRotation (-0.005302) XT
82.5947 442.8613 m
81.4478 440.8657 73.0342 433.0317 78.1831 429.8589 C
82.1738 427.5732 96.6919 427.8081 100.165 430.0132 C
100.8848 432.6084 102.3125 435.3726 101.02 437.6074 C
98.583 438.6152 96.146 439.6235 93.708 440.6313 C
90.0044 441.3745 86.2979 442.1182 82.5947 442.8613 C
f/BBAccumRotation (-0.005302) XT
0 0 0 1 k
86.0991 489.791 m
85.5718 489.7471 84.8853 489.0986 84.7368 488.7124 c
84.5889 488.3267 84.9102 487.2646 84.9971 486.5396 C
85.1763 486.2671 85.356 485.9951 85.5352 485.7231 C
86.373 485.3154 87.3862 485.6665 87.7061 485.7114 c
88.0254 485.7568 88.0962 485.6396 88.2529 486.5229 c
88.4097 487.4048 87.9009 488.3335 87.7251 489.2393 C
87.1831 489.4229 86.6279 489.8354 86.0991 489.791 c
f/BBAccumRotation (-0.005302) XT
119.1958 487.7153 m
118.7974 487.4697 118.1812 486.0674 118.3677 485.0063 c
118.5547 483.9443 118.7822 483.876 119.7173 483.6421 c
120.6519 483.4077 121.2285 483.5059 121.6187 483.9038 c
122.0083 484.3013 121.8027 484.4448 121.8936 484.7168 C
122.5 486.1978 121.7642 486.7915 121.0962 487.7051 C
121.0054 487.7056 119.5942 487.9614 119.1958 487.7153 c
f/BBAccumRotation (-0.005302) XT
0.2274 0.4941 0.4588 0.0941 0.6941 0.4157 0.3647 Xa
127.0303 480.8901 m
130.333 481.0171 132.8115 480.3242 133.7993 478.1392 C
133.9761 477.3257 134.8896 478.9478 134.3296 475.6948 c
133.7695 472.4414 122.0415 469.5073 121.8506 476.5752 C
123.1533 479.2729 124.4214 479.5269 127.0303 480.8901 C
f/BBAccumRotation (-0.005302) XT
0.0196 0.5961 0.9137 0 1 0.4 0 Xa
80.9956 448.5693 m
85.4224 447.4595 89.8501 446.3511 94.2754 445.2417 C
103.9302 443.7666 118.7588 447.8911 126.0488 449.415 C
126.229 449.2334 126.4092 449.0518 126.5894 448.8701 C
126.604 447.4307 126.4346 446.6938 126.0303 445.8877 C
120.7524 445.3652 103.2969 438.6313 102.1118 438.9585 c
99.3979 439.7085 95.6577 441.8276 92.6348 442.8086 c
89.5713 443.8013 83.6289 443.2388 81.5215 445.3096 C
81.3467 446.3955 81.1704 447.4819 80.9956 448.5693 C
f/BBAccumRotation (-0.005302) XT
U0 To
1 0 0 1 102.7266 557.3955 0 Tp
0 Tv
TP
-39.9314 0 Td
0 Tr
0 g
%_ 0 50 XQ
/_AshleyInline 27.2917 26.8386 -8.4887 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
1 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 3 Th
0 Tq
240 Tg
0 0 Tl
0 Tc
0 Tw
(OBEY) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 102.7266 398.1934 0 Tp
0 Tv
TP
-45.6416 0 Td
0 Tr
(MIFFY) Tx 1 0 Tk
(\r) TX 
TO
U200.854 402.7568 m
199.5791 401.7695 198.0117 395.5566 198.0728 393.1182 c
198.1382 390.4961 199.1309 387.9976 198.9097 385.3525 c
198.7021 382.8706 199.8242 377.3599 198.792 372.7144 C
198.2759 377.2861 198.2349 383.1382 198.1206 384.627 c
197.9565 386.7539 197.3027 392.1904 197.4756 394.3047 c
197.8931 399.4102 200.8145 405.4771 201.2642 405.3647 c
201.7139 405.2524 202.1289 403.7441 200.854 402.7568 c
f/BBAccumRotation (-0.158991) XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
