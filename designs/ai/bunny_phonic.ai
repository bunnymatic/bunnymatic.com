%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (george g rat) ( )
%%Title: (bunny_phonic.ai)
%%CreationDate: (1/2/2002) (4:19 PM)
%%BoundingBox: 52 150 427 445
%%HiResBoundingBox: 52.3643 150.3975 426.8125 444.5542
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 171 155.5 171 155.5
%AI3_TileBox: 0 0 592 744
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -388.5 763 0.5 776 497 18 0 1 17 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%%AI3_PaperRect:-8 784 604 -8
%%AI3_Margin:8 -40 -9 8
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 104 8
%%BeginData: 18670 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD9EFFA87D525227FD0452A8
%7DA8A8FD0AFFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D527D52
%52527D5252527D52FD1227FD04527D527D7DA87DA8FD2AFFA827FD5EF827
%27522752277D527DA8FD15FF7DF8F8F8264A74749E989E74744A744A744A
%4A2026262620262626202626262026FD13F82626262026264A4A744A744A
%744A744A744A744A744A262026FD05F82620FD0426744A744A744A4A2026
%FD0BF852A8FD12FFF8F84AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09E9E9874504AF852FD11
%FF52F8F8C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C69EF8A8FD10FF52F826C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C67427FD10FFF8F820C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C098F8A8FD0FFFF8F84AC6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0F8A8FD0FFFF8F84AC0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C62652FD0FFFF8F87AC6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C05050C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%5052FD0FFFF8F898C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%4AF8F8F826C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C674F8FD0E
%FFA8F8F8C6C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C64AF85050
%9EF874C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09E
%745098C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09EF8A8FD0DFFA8
%F8F8C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0984AF89EC0C0C626
%4AC0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C098F8F8F826
%F874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C09EF8A8FD0DFFA8F8F8
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C62620C6C6C0C6C0504AC6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C650F84A9EC0C674F8
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6F87DFD0DFFA8F826C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C64AF89EC6C0C0C0C69EF8C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C64AF874C6C0C0C020F8C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0F87DFD0DFF7DF826C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C69EF874C6C0C6C0C6C0C6F89EC0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C674F874C6C0C6C09EF826C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C64A52FD0DFFA8F826C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C026F8C6C0C0C0C6C0C0C02074C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C698F874C6C0C0C0C674F84AC6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C02052FD0DFFA8F826C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C64A4AC0C6C0C6C0C6C0C6744AC0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0264AC6C0C6C0C6C6F826C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C67427FD0DFF7DF826C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C02074C6C0C0C0C6C0C0C07420C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C050F89EC0C6C0C0C04AF86EC0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C04A27FD0DFF52F84AC0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C64A4AC0C6C0C6C0C6C0C6C0F89EC6C0C6C0C6C0C6C0C6C0C6
%C09E74F898A42650C0C6C0C6C074F826C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C67427FD0DFF7DF874C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C07420C0C0C6C0C0C0C6C0C04A4AC0C0C07A744A989EC0C0C0C6F8
%F8F8744AF8C0C6C0C0C098F820C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C04A27FD0DFF52F850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0F874C6C0C6C0C6C0C6C074269E50FD06F826747A74F8F8F84AF8C0
%C6C0C6C09E264AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C674F8FD0DFF7DF874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C674F8
%9EC6C0C0C0C6C0C09EF8F8F85074C0C0C09E9E5026FD05F84AC0C0C6C04A
%20F8C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C04AF8FD
%0DFF52F826C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C64AF8C6C6C0
%C6C0C69EF8509EC0C6C0C6C0C6C0C6C0C626FD04F8269E7426F8F8F826C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C674F8FD0DFF52
%F826C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C09E26F8C0C6C0C074
%F89EC0C0C6C0C0C0C6C0C0C0C6C04AFD0BF874C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C04AF8FD0DFF52F826C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C62626C69E264AC6C6C0C6C0C6C0C6C0C6
%C0C6C0C674FD0AF850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C674F8FD0DFF7DF826C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C098F820F826C0C6C0C0C0C6C0C0C0C6C0C0C0C6C050F8F8F820
%C074FD04F8C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C04AF8FD0DFF52F826C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C074F84AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0202674C0C6C074
%F8F84AC6C0C6C0C6C0C69E9EC0742650C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%74F8FD0DFF7DF826C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C62026C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C02626
%C0C0C6C0C0C0C6C020F826F8F8F89EC0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C04AF8
%FD0DFF52F826C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C674F8
%C6C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C69EF8C0C6
%C0C6C0C6C0C626F8F87474F8C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C09E9E9EC0C6C0C6C0C6C0C6C0C674F8FD0D
%FF7DF826C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C02074C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C09EF874C0C6C0
%74C09E26F8F826C0F84AC6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C09E4A20269EC6C0C0C0C6C0C0C04AF8FD0DFF52
%F84AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09EF8C0C0C674F8
%269EC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0F89EC6C074F8F8
%26F8F8F8C026F89EC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C64AF8C0C6C0C6C0C6C0C674F8FD0DFF52F874
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C64AF8C0C6C0F8F8F826
%C0C0C6C0C0C09E4A6EC0C6C0C0C0C6C0C0C0C6C074F87AC0C0C0F8F8F820
%F84AF8F8F82698C09EC0C0C0C6C0C0C0C6C0C0C0C6C0C0C09E74C0C09EC0
%C0C0C6C0C0C0C6C0C0C09E2020C0C6C0C0C0C6C04AF8A8FD0CFFA8F850C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0264AC6C050F8F8F826C0
%C6C0C6C0C64AF8F826C0C6C0C6C0C6C0C6C0C650F8C0C6C0C6C0C6C074F8
%7450749E74262626C6C09E2050C0C674264AF898C6C0C626F826F874C6C0
%C6C02650C6C0C6C0C6C074F89EC0C6C0C6C0C674F8A8FD0CFFA8F874C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C62620C0C6FD04F84AC0C0C6
%C0C0C0FD04F87AC0C0C0C6C0C0C0C6C0F874C6C0C0C0C6C0C04AF8C0C0C0
%C6C020F8F8C0C04AF84AC0C0FD04F84AC0C04AFD05F8C0C0C09EF8F8C0C6
%C0C0C0C6C0F874C6C0C0C0C6C04AF87DFD0CFFA8F84AC0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0264AC6C0FD04F89EC0C6C0C6C0C6FD04F8
%C0C6C0C6C0C6C0C6C02620A4C0C6C0C6C0C6C026F8C6C0C6C0C626F8F8C6
%C0F8F850C020FD04F826C650FD06F8C6C0C64AF8F8749E9EC0C6C09EF850
%C0C6C0C6C0C674F8A8FD0CFFA8F874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C04AF8C0C04AF8F8F8C0C6C0C0C0C6C04AF8F84AC0C0C6C0C0
%C0C6C074F87AC0C0C0C6C0C0C0C626F8C0C6C0C074F8F8F89E26FD07F826
%4AF826F8F84AF8204AFD05F820FD05F826C04AF874C0C0C6C0C0C074F87D
%FD0CFFA8F850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C074F89E
%C0C69E9EC0C6C0C6C0C6C0C6C09E9EC6C0C6C0C6C0C6C0C02650C0C6C0C6
%C0C6C0C6C0F8269E9E5026F8749EF8F8F84AC0264A7474F8989E26F8F874
%C02674C674F8F8F84A9EC09E9E9E74F84AF84AC6C0C6C0C6C0C69EF87DFD
%0CFFA8F874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0F874C0
%C0C6C098F874C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C626F8C0C6C0C0C0C6
%C0C0C0C64AF8F8F8204AC0C6C06E2674C0C0C0C6C0C0C0C6C0C0989EC0C0
%C0C6C0C0C07AC0C0C0C6C0C0C0C6F8F8269EC0C0C0C6C0C0C098F852FD0C
%FF7DF850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C674F8C0C6
%C0C6C0F8269EC0C6C0C6C0C6C0C6C0C6C0C6C0C674F874C6C0C6C0C6C0C6
%C0C6C0C69E7AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C64AF8F874C0C6C0C6C0C6C0C6C0F852FD0CFF
%A8F874C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C02620C0C0
%C0C674F8F89EC0C0C0C6C0C0C0C6C0C0C0C69EF8F89EC0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C09E26F89EF84AC0C0C6C0C0C0C6C0C0F827FD0CFFA8
%F850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C62626C6C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C69E20F87AC0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C09E2020C0C64AF8C0C6C0C6C0C6C0C6C0F852FD0CFFA8F8
%74C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C07AF8F89EC6
%C0C0C0C6C0C0C0989E749E98742620F8F8F8C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C02620C0C0C074F874C0C6C0C0C0C6C0C0F8F8FD0CFFA8F874
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C69EF850F82626
%744A4A2626F8F8F84A4A749E9E98F8F826C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0A4C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0F8C6C6C0C6C0F874C6C0C6C0C6C0C6C026F8FD0DFFF89EC0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C06EF8F8F826744A74
%4A9E4AF8F84A9EC0C0C09E4AF8F87AC098989EC0C0C0C6C0C0C0C6C0C0C0
%C6C0C09E26264AC0C64AF8C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C04A74C0C0C6C0C0264AC0C0C0C6C0C0C0C626F8FD0DFFF898C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C698F8F8F826F874264A74C0C6C0C6
%4AF89E744AF84A26264A50F89E26F8F8F89EC0C6C0C6C0C6C0C6C0C6C09E
%74F84A4AF84AC050F89EC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%4AC0C0C6C0C6C0264AC6C0C6C0C6C0C6C026F8FD0DFFF89EC0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C64AF8749874F8F89EC07426F84A4A26F898
%C0C0C6C0749EC6C074F8F8F87474F89EC0C0C6C0C0C0C6C0C0C0C626F84A
%C6C074F89E74F874C6C0C0C0C6C0C0C0C6C0C0C0C6C0C07450C0C0C026C0
%C0C0C6C050F850C0C0C0C6C0C0C0C626F8FD0DFFF89EC0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0264AC6C0C6264AC0C6C0C6C0747498C0C6C0C6
%C0C6C0C6C0C69EF8F874C0F826C6C0C6C0C67426C0C6C0C674F8F898C0C6
%9EF89E50F850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C020F8C6C0C64A509E9E
%9E26F826C0C6C0C6C0C6C0C6C026F8FD0DFFF89EC6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C074F89EC0C0F89EC0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6204AC04AF84AC0C6C0C0C074F8F8262626F8F8F8C0C0C074F8
%7474F84AC0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C098C0C6C0984AF8F8204A
%74C0C0C0C6C0C0C0C6C0C026F8FD0DFFF89EC0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C626F84A2626C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C074264AF84AC0C6C0C6C0C6C09E5020F82698F8F8C6C0C67AF89E50
%F850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C026F8A8FD0CFFF89EC6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C09E7426F826C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0F8F850C0C0C0C6C0C0C0C6C0C0C0C6C0C026F8C0C09EF820C074F8
%98C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C0C026F8A8FD0CFFF898C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C698F874C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C650F8C0C6C0C6C0C6C0C6C0C6C0C6C0C6C026F84A50F8269EC050F89E
%742698C6C0C6C0747450C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C04AF8A8FD0CFFF874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C050F874C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0
%C09EF84AC0C6C0C0C0C6C0C0C0C6C0C0C0C626F84A264A98C0C64AF826F8
%F820C0C6C0F84A7474F874F84AC0C0C69820C0C6C04AF8F8F826C0C6C0C0
%C0C6C0C0C0C674F8A8FD0CFFF850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C64AF8C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C04A26C6C0C6C0C6C0C6C0C6C0C6C0C6C026F89EC0C6C0C6C050F8F826F8
%26C6C050F850C0C0FD04F8C0C6C0F8F89EC04AFD05F89EC0C6C074C0C6C0
%C6C050F8A8FD0CFFF874C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0F826C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0F874
%C6C0C0C0C6C0C0C0C6C0C0C0C626F874C6C0C0C0C64AF8F87426F8C0C6F8
%F874207420F84AF826C026F8F84A26FD04F8C0C0C0C6C098F89EC0C0C0C6
%74F8A8FD0CFFF850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C074
%F84AC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C650F8C0C6
%C0C6C0C6C0C6C0C6C0C6C026F850C0C6C0C6C026F8F8C074F8744AF8F8C6
%C0F82674C050F8F8F82620F8F826C026269EC0C6C09E26F8C0C6C0C6C050
%F87DFD0CFFF874C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C626F8
%9EC6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C09EF84AC0C6
%C0C0C0C6C0C0C0C6C0C026F84AC0C0C6C0C04AF84AC0C026262074F87426
%269EC0C0C04A2626C09E7474C0C674F8F82626F8F8269EC0C0C6C0C074F8
%A8FD0CFFF850C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0F8F8C0
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C04A26C6C0C6
%C0C6C0C6C0C6C0C6C050F850C0C6C0C6C0C6749EC0C6C0C6C0C6C0264AC6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C07474507474C0C6C0C6C0C6C050F8A8
%FD0CFFF84AC6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C09EF820C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C698F874C6C0C0
%C0C6C0C0C07A984A4AF84AC0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C09E7A
%9874C0C6C098C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C074F8A8FD
%0CFFF826C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C69EF850C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6F8F8C0C6C074
%4A26FD0CF826264A50747A9E5074504A26FD0AF82626747AC0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C04AF8A8FD0CFFF826C0C0C6C0C0C0C6C0C0C0C6C0C0
%C0C6C0C0C0C6C026F874C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6
%C09E9E74744A26F8F87426FD05F820749E749E4A744A20FD10F826744A74
%4A744A5020FD04F82674C0C0C0C6C0C0C0C6C0C0C0C674F8A8FD0CFFF8F8
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6F8F87450745074505026
%4A2626264A4A74264A264A264A20FD11F8264A2626FD16F8264A4A74509E
%744AFD05F8749EC0C6C0C6C0C6C0C6C050F8A8FD0CFFF8F8C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0FD08F84A744A26F8262626202626F820
%9E9874FD13F82620FD08F8264A742626FD0AF82020FD0DF8264A749EC0C0
%C0C674F8A8FD0CFFF8F8C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0FD049EA42626C0C6C6F874C6C0C6C0C6C074F84A9E26FD0DF820745050
%4A4AF826FD15F84A2626FD12F874C0C6C050F87DFD0CFF27F874C0C0C0C6
%C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C04AF89E9EF8F89EC0C0
%C0C6C0C0C04AFD0EF850989E4A26F8F8F82626744A27FD06F820744A2620
%FD07F82026F820F826FD0FF874C6C0C074F8A8FD0CFF52F89EC6C0C6C0C6
%C0264AFD05F84A265050747A9EC6C0C6C0C6C04AF8F8269EC0C6C0C6C0C6
%C0C69826FD09F82074989E4A26F850509E9E9E4A26F826264A50749EC0C6
%C09E7A5050FD04F8264A264A26FD12F8269EC0C6C09EF8A8FD0CFF27F898
%C0C0C0C6C026FD12F8202074264A4A7450744A74504AFD0DF82620F8F850
%749E7450FD04F82698749E989E74744A26FD08F826744A744A7474FD10F8
%4A74C0C6C0C09EF8A8FD0CFF27F89EC6C0C6C026F8F82626FD08F826FD22
%F826502626FD1BF826264A2626FD12F826C0C6C098F8A8FD0CFF27F84AC0
%C6C0FD07F8202626264A4A744A744A744A742626FD1BF8264A26FD08F820
%504A744A9E749E74744A26FD09F8504A744A744A744A74264A20FD04F826
%2626F8F8F84AC0C0C674F8A8FD0CFF52F874C6C09EFD04F8509EC0C6C0C6
%C0C6C0C6C0C6C09E9E74742626F8F84AFD17F82650F8F8F8264A74749EC6
%C09E9E987450744A4AFD1FF89E74509EC0C6C050F8A8FD0CFF52F84AC0C6
%C0FD04F826264A74202626262026FD0BF820264A204AFD0BF82650746E74
%7A987474F82674C09E9E74744A26FD0BF8262026FD1DF898C0C0C674F8FD
%0DFF7DF84AC6C0C650264AFD17F84A20FD09F8749E9EC0C6C0FD12F8264A
%509E7A9E9EC0C6C0C6C0C6C0C6C0FD049E7A9E5074504A26F8F8F82626F8
%F8F826264AF8F8F874C6C0C6C026F8FD0DFF52F826C0C0C0C6C0C0C07A98
%74989EC0C0C0C6C0C0C0C6C074747AC0C0C0C6C0C0987A9874987A987498
%7AC0C0C0C6C0C0C07A98C0987A9874987A9898C07A9898C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0749E
%C6C0C0C0C6C0C0C0C6C0C026F8FD0DFFA8F8F8C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0F827FD0DFF7DF8F89EC0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C098F827FD0EFFF8F826C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C650F852FD0EFF52F8F8202626744A744A744A744A74749E749E749E
%749E749E749EC6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0
%C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0C0C0C6C0984A
%F8F8A8FD0FFF27FD1DF84A264A264A50745074509E9E9E989E9E9E989E9E
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C09E9E9874504AFD04F8
%52FD11FF7D527D52272727FD0BF8FD0827FD3EF82626262026FD0DF82727
%527DFD34FFA8A87DA8A8A87DA87D7D527D527D527D527D527D527D527D52
%7D27522727275227272752272727FD16F8272752527D7DA8A8FDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDA7FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
uu1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
426.8125 170.4932 m
67.8809 150.3975 L
52.3643 424.4585 L
411.2949 444.5542 L
426.8125 170.4932 L
n/BBAccumRotation (0.056558) XT
0 Ap
0 O
0 0 0 1 0 0 0 Xa
72.5137 195.5117 m
69.6367 217.5605 70.7217 256.4092 69.7529 292.0898 c
68.8809 324.2227 68.3047 352.9336 70.627 392.7344 c
71.0371 399.751 73.8428 405.6851 80.8418 408.6475 c
90.4023 412.6929 103.0566 410.3721 113 409.7261 c
132.7051 408.4463 152.4219 409.8608 172.1465 409.8101 c
233.5635 409.6528 268.5996 413.5811 329.6133 409.1768 c
338.6406 408.5249 385.0781 409.9146 390.873 404.6025 c
404.4141 392.1904 402.4629 340.8613 403.4277 317.2002 c
404.6602 287.0107 405.7793 299.1196 406.3252 268.9111 c
406.498 259.2988 408.1367 219.6768 405.8535 201.248 c
405.5156 198.5215 405.8184 195.4814 405.3711 192.8477 c
405.0293 190.835 403.1279 187.9551 401.9902 186.0186 c
399.2754 181.3955 382.127 181.6445 379.1846 181.2568 c
342.5576 176.4365 307.9883 178.9365 271.1172 179.5771 c
240.1768 180.1143 207.8584 180.0605 176.752 181.3262 c
155.8311 182.1777 135.9082 182.4746 114.209 181.4102 c
108.6602 181.1387 90.5801 182.9717 85.3008 182.8633 c
80.0215 182.7549 73.9619 184.4063 72.5137 195.5117 c
f/BBAccumRotation (0.020526) XT
0.0157 0.3098 0.9686 0 1 0.6824 0 Xa
398.127 363.2378 m
400.542 342.4736 396.7402 331.2334 399.5762 298.5308 c
402.1514 268.8062 400.585 258.2139 401.9902 222.2354 c
402.2461 215.7129 401.7031 197.5879 398.127 191.3301 c
392.3516 181.2227 320.0938 184.7744 301.3271 184.7021 c
242.8906 184.4775 208.3418 184.2188 150.2695 187.9395 c
141.6768 188.4902 90.3906 188.4326 83.6309 189.8809 c
76.8711 191.3301 78.1738 210.6484 75.4219 238.1699 c
72.5244 267.1431 75.7441 314.9224 75.0762 342.9565 c
74.7686 355.8325 75.1426 367.606 76.7051 380.4663 c
77.0137 382.9995 78.3477 398.6162 79.4219 400.4204 c
81.9824 404.7271 98.6045 405.4521 101.4238 405.3125 c
139.4707 403.4263 172.1113 403.6616 207.1973 403.29 c
236.6367 402.9775 264.1904 406.8052 293.4932 403.9209 c
313.3105 401.9717 333.8203 406.2622 353.7021 403.8003 c
358.9453 403.1499 384.4785 402.7085 388.9521 400.4204 c
394.8223 397.4194 395.7393 383.7783 398.127 363.2378 c
f/BBAccumRotation (-3.115236) XT
U0 0 0 1 0 0 0 Xa
144.3184 381.1973 m
139.9961 376.2368 134.291 373.1333 131.1094 367.0596 c
124.1934 353.8608 138.9453 339.8716 145.8779 332.2534 C
139.0293 320.6987 134.2012 308.6021 143.4629 295.1191 c
145.0684 292.7837 145.8867 290.2017 148.5771 289.1348 C
149.3545 284.3877 147.8457 282.3091 147.707 278.0356 C
146.293 278.5371 146.6426 279.375 145.6914 279.8545 c
140.1289 282.6548 134.9297 278.1094 132.4668 275.3286 C
132.8809 270.8286 134.7715 266.8086 138.7617 265.0791 C
139.0469 264.8394 141.834 264.2832 142.6211 264.7969 C
142.7803 264.8047 142.9404 264.813 143.0996 264.8213 C
142.5801 261.6738 140.3457 249.8428 139.0957 249.2354 C
139.3447 247.7168 138.335 245.3506 137.8555 245.3262 C
137.5498 241.043 136.7246 234.9717 134.208 232.1602 C
134.4492 230.3633 134.7441 230.0137 135.3389 228.8545 C
139.416 227.3525 145.459 227.8506 152.1904 228.2803 C
152.6074 222.6621 155.8174 221.9346 158.4365 218.9893 C
165.627 219.0459 169.9707 222.3906 170.8848 229.2432 C
179.3145 229.6465 184.1348 228.9707 191.0684 229.3193 C
191.5625 224.9023 197.9395 220.54 201.0254 222.623 C
201.3457 222.6396 201.665 222.6563 201.9844 222.6729 C
201.0811 221.0078 199.6426 221.8027 197.7441 221.0127 c
192.3887 218.7803 180.8779 216.3809 174.3789 217.4063 c
168.5527 218.3262 161.5732 216.2832 154.1719 217.8086 c
150.0586 218.6553 148.7363 218.5889 144.9648 219.2568 c
142.7207 219.6563 139.1465 218.7236 138.2539 218.9111 c
132.3115 220.166 125.2686 220.7637 119.8906 220.8496 c
116.1992 220.9092 108.7041 223.4346 103.9961 221.4736 c
102.7637 220.96 98.5449 221.5771 97.4463 220.8809 c
95.793 219.8301 96.6113 218.1357 94.6074 217.1445 c
92.207 215.96 90.9082 213.6387 87.6133 212.9395 C
87.3555 209.7588 87.291 205.8574 88.5869 203.377 C
90.374 202.6475 95.1289 202.3516 99.6855 202.5068 C
99.7109 202.0273 99.7354 201.5488 99.7598 201.0693 C
116.2813 201.9512 128.1406 203.0342 142.0176 201.8027 C
142.043 201.3232 142.0674 200.8438 142.0918 200.3643 C
148.3594 202.9277 163.8223 201.9111 172.7959 201.4648 c
177.7031 201.2188 184.8906 202.3496 187.7051 201.2705 C
190.2617 201.4023 192.8193 201.5342 195.375 201.665 C
195.0234 202.4766 195.2578 202.1299 194.8467 202.5986 C
195.6738 204.583 201.752 204.0439 205.2939 205.0596 c
213.543 207.4258 224.9414 208.1816 235.875 208.5566 C
235.8828 208.3965 235.8916 208.2363 235.9004 208.0771 C
233.9492 207.3252 233.2197 206.0664 231.7324 204.9785 C
217.4629 203.415 215.4102 204.6191 V
214.3125 204.4063 214.2305 204.335 213.5166 204.041 C
213.6836 202.9346 213.6816 202.6934 214.0957 202.1484 C
216.8594 200.5391 221.2734 202.2988 225.1699 201.7568 c
228.6211 201.2773 237.9658 200.7998 243.46 201.2559 c
244.6572 201.3564 247.2266 202.3867 249.1875 202.0322 c
253.8408 201.1895 265.2129 202.0352 268.8408 203.0439 c
270.2412 203.4316 275.541 204.5645 276.9414 204.4219 c
285.4219 203.5566 296.127 206.4688 305.248 205.3984 c
317.6318 203.9453 335.9824 204.748 347.7275 201.8174 c
349.9883 201.252 353.4053 202.6094 354.8936 202.666 c
358.0869 202.791 360.9727 202.1289 363.1172 201.6475 c
366.8438 200.8115 369.7998 202.9648 371.6973 203.0518 c
375.9287 203.2441 382.0684 200.7441 385.1689 202.7822 C
387.7607 203.2441 387.585 204.2969 389.3594 205.4014 C
389.2461 206.6143 389.209 207.1758 388.7559 207.7744 C
388.7393 208.0938 388.7236 208.4131 388.707 208.7314 C
385.9404 209.0518 383.5566 207.3018 380.5576 208.3135 c
379.9805 208.5078 378.7764 209.9023 378.0625 210.1074 c
374.4229 211.1553 372.4268 209.6064 369.8389 211.126 C
369.5186 211.1094 369.1992 211.0938 368.8809 211.0771 C
368.8721 211.2354 368.8643 211.3965 368.8564 211.5566 C
373.5781 211.3145 387.8232 211.4561 389.1113 210.1953 C
390.2441 210.8867 389.4629 209.9893 390.0215 211.2031 C
390.625 212.0732 390.0146 212.0146 390.4268 212.666 C
390.3779 213.624 390.3281 214.584 390.2793 215.543 C
389.6133 214.0098 384.6738 217.9512 382.9404 218.0479 C
383.5674 219.2842 384.1318 218.8301 384.7598 220.0645 C
385.8447 219.8145 386.0439 219.7764 386.7266 219.2051 C
388.291 219.6953 389.0215 220.7354 389.958 221.7744 C
390.1748 222.0352 390.8223 225.7217 389.6865 227.0479 C
386.9951 229.1934 375.5498 229.9346 371.1992 231.3818 c
367.1133 232.7422 362.6475 235.1572 358.4395 236.4941 c
352.9775 238.2275 346.8984 238.4668 341.4404 239.9443 C
338.3428 239.0967 330.6543 239.8525 326.5313 240.1387 c
320.5977 240.5479 312.8477 238.1973 309.8018 238.3154 C
305.6563 237.9424 301.5098 237.5684 297.3633 237.1953 C
291.8965 238.1533 286.2754 238.2334 282.3799 238.8271 c
276.8984 239.6602 271.2852 238.1426 267.3965 240.458 C
266.4287 255.938 266.4092 259.6328 V
272.5156 255.6743 279.3545 262.5386 280.9238 267.1094 c
281.9053 269.9629 281.2432 273.1104 280.96 275.7627 C
280.4268 278.8247 276.8633 280.8901 275.8203 282.2271 C
273.5762 282.2715 271.3301 282.3159 269.085 282.3608 C
267.7559 281.8076 266.9502 279.332 265.9023 278.8325 c
265.2393 278.5166 263.2354 278.8203 262.0664 278.6353 C
261.752 276.979 261.5996 276.9121 261.7354 275.7339 C
261.2559 275.709 260.7773 275.6846 260.2979 275.6597 C
259.1855 268.7046 247.0586 269.3413 244.0479 273.8628 C
242.8369 273.749 242.2764 273.7124 241.6768 273.2598 C
241.3564 273.2437 241.0371 273.2266 240.7178 273.2104 C
241.0117 272.2026 241.2354 271.4985 241.7988 270.8633 C
245.3184 266.3682 255.8564 264.8574 260.5938 269.9077 C
262.2393 269.231 261.8164 253.2178 261.5801 250.7334 c
261.1641 246.3438 261.6221 241.9082 263.4873 241.6992 C
263.5039 241.3789 263.5195 241.0605 263.5361 240.7402 C
254.6484 240.748 233.6035 238.5186 228.3604 233.1621 C
228.2002 233.1533 228.04 233.1465 227.8809 233.1377 C
228.665 237.9102 220.875 251.0356 218.5469 255.7275 c
217.1592 258.5244 216.8145 261.2422 214.7969 263.2251 C
215.3643 265.4663 221.0439 267.4155 223.1045 269.9009 c
224.4277 271.4971 224.0625 273.4683 224.7256 275.7515 c
224.8359 276.1309 225.7227 275.9922 225.6348 276.7603 c
224.5938 285.8755 213.6836 279.147 210.7266 276.9541 C
210.4297 277.686 210.0508 279.6392 209.5938 280.2598 C
209.5996 283.1802 211.4121 285.3208 213.1094 286.689 C
212.7412 288.1685 212.9658 287.8506 212.0508 288.5566 C
212.8418 291.1655 214.6934 292.5601 216.0684 294.5313 c
217.4844 296.5591 217.834 298.8159 219.1035 300.936 c
221.5664 305.0454 225.2754 309.2285 227.0908 313.8442 c
228.8105 318.2188 229.2168 326.0103 225.7979 329.6382 C
226.1523 330.0415 228.7051 330.1001 229.5576 331.2739 C
229.8027 332.7275 230.0488 334.1821 230.2949 335.6367 C
231.8496 337.8516 234.6289 342.437 236.5859 344.1318 C
236.2275 345.1855 236.168 345.3799 235.5283 345.999 C
237.168 350.0439 242.2295 352.6128 244.623 356.0811 c
246.4209 358.686 248.7256 362.2441 249.9316 365.0044 c
250.7979 366.9917 250.5664 369.5708 251.0977 370.3516 C
250.7363 374.9946 248.4893 375.8105 246.3643 378.2798 C
225.8945 379.665 220.8613 358.3862 211.3887 348.1221 C
211.3965 347.9624 211.4043 347.8018 211.4121 347.6421 C
211.2529 347.6333 211.0938 347.6255 210.9336 347.6172 C
210.9248 347.7773 210.916 347.9375 210.9082 348.0967 C
210.748 348.0889 210.5889 348.0806 210.4297 348.0723 C
210.5605 351.3066 211.2129 352.4141 211.5215 354.8579 C
210.4111 355.7524 210.293 356.2578 208.5469 356.627 C
206.959 357.3076 206.4336 355.123 205.3145 354.0576 C
204.2871 354.7451 203.9795 355.082 202.8926 354.4136 C
200.5791 353.3354 201.2959 350.7412 200.8164 348.0576 C
195.377 348.5127 190.2715 350.5635 184.7773 351.5586 c
177.415 352.8901 171.252 349.1255 166.2295 347.7197 C
163.3623 354.8105 160.833 365.0659 159.6016 371.6802 c
159.0098 374.8608 158.9678 377.7485 157.3359 380.4258 C
155.1836 384.7246 151.9814 384.5605 v
148.7793 384.3955 144.3184 381.1973 Y
f/BBAccumRotation (0.051427) XT
264.8379 318.1899 m
265.4766 318.2231 266.1152 318.2559 266.7539 318.2886 C
268.4502 316.1968 270.8145 315.8203 272.2979 313.2866 C
272.459 313.2949 272.6191 313.3032 272.7783 313.311 C
272.7705 313.4712 272.7617 313.6309 272.7539 313.7905 C
273.4316 314.5718 273.0811 314.6909 274.1182 315.3032 C
274.6631 315.7168 274.9033 315.7148 276.0107 315.8809 C
278.377 312.0767 276.123 307.1592 277.5371 304.9053 C
278.2969 303.7417 277.8711 303.8857 279.5283 303.5649 C
280.4473 304.9229 282.1797 305.418 283.2148 306.6392 c
285.5078 309.3413 284.8711 314.5327 289.002 315.5884 C
289.5107 315.2285 289.1436 315.4253 289.9854 315.1587 C
290.3281 314.5723 290.5596 314.1929 291.0195 313.77 C
290.5361 311.1099 290.5176 309.603 290.9092 306.5547 C
291.2285 306.5713 291.5488 306.5874 291.8691 306.604 C
292.4014 306.27 292.3359 306.3394 293.3311 306.1987 C
294.5527 307.6191 296.9014 308.2573 297.9521 309.8008 c
298.6973 310.8936 299.002 314.0508 300.1025 314.7178 C
300.5811 314.7422 301.0605 314.7671 301.54 314.7915 C
304.4678 312.8994 307.8223 316.9727 310.7227 313.8223 C
311.9023 312.2593 311.1104 310.4263 311.9775 308.1191 c
312.3574 307.1079 313.459 306.3076 314.042 305.3418 C
314.3613 305.3584 314.6816 305.3745 315.002 305.3911 C
316.4746 307.6582 322.3906 316.4487 324.9795 316.9595 C
326.0098 316.002 327.3896 315.1216 328.4824 314.2559 C
329.6982 316.231 330.6367 316.0044 333.2021 315.9409 C
335.0273 313.291 335.7246 310.3291 336.0684 306.9561 C
338.0732 305.8403 341.21 304.3755 343.7871 306.3926 C
349.0215 308.6362 346.793 314.5918 351.0127 315.416 C
351.9727 314.4888 352.4355 314.5913 353.0537 313.1177 C
353.3574 312.3599 352.9746 309.8887 353.3008 308.3242 C
353.6201 308.3403 353.9404 308.3574 354.2598 308.3735 C
360.6064 304.8267 365.2129 310.564 369.4893 301.9478 C
369.8096 301.9644 370.1289 301.981 370.4482 301.9976 C
371.7441 304.3911 373.7432 305.5176 373.9375 308.9058 C
376.3936 313.061 369.9111 320.6548 367.9736 322.0566 c
366.3096 323.2612 363.7354 323.54 361.6191 324.1328 C
361.6104 324.292 361.6025 324.4517 361.5947 324.6118 C
362.4063 324.9414 363.083 325.1162 364.4453 325.2397 C
366.1729 324.1763 368.6162 324.2231 370.3223 323.1392 c
374.5322 320.4609 381.1992 311.186 377.0605 304.2598 c
375.584 301.7871 372.1357 300.0049 371.1758 297.2285 C
373.6563 294.0757 376.6475 279.041 375.5664 277.2681 C
373.6729 270.5669 362.9316 269.376 356.2578 269.5444 C
354.7598 271.1875 352.8057 271.4009 351.7217 273.6372 C
349.4346 276.3325 351.3027 279.6938 352.2607 281.835 c
353.9092 285.5176 355.2061 289.2061 357.998 291.7437 c
360.8447 294.3296 365.957 295.9702 366.1836 300.8164 C
365.3145 301.5742 364.7207 302.5303 364.1182 303.5938 C
361.0732 303.5977 358.0293 303.6006 354.9854 303.6045 C
352.9668 304.1421 352.1621 305.4932 349.5898 305.7295 C
348.7842 303.4453 346.1289 301.811 343.0762 301.5498 C
339.2568 298.8716 332.6377 304.0254 331.2988 306.23 c
330.0674 308.2617 331.8291 308.8311 330.168 309.5366 C
330.1846 309.2173 330.2012 308.897 330.2168 308.5786 C
328.5 305.5352 330.457 302.6929 325.7441 302.0991 C
325.084 302.9463 324.7588 302.8716 324.208 303.9424 C
323.9023 304.4263 323.9121 308.3086 322.498 309.1416 C
322.2041 304.4023 317.5459 299.4663 312.8018 301.4331 c
311.5947 301.9331 311.6113 302.8154 309.8271 303.2021 C
309.7002 303.7319 306.9854 310.0195 306.5811 310.2451 C
306.5977 309.9253 306.6143 309.606 306.6309 309.2866 C
305.2236 307.5557 305.2725 304.8726 304.5781 302.4521 C
303.3301 301.8091 302.8193 301.4868 300.793 301.2954 C
299.9639 302.6792 299.2363 302.8184 298.7021 304.5518 C
296.1465 303.999 294.8018 301.3091 291.1309 302.2402 c
289.1973 302.731 287.834 304.9321 286.6689 304.895 C
283.5195 301.4902 282.1445 299.4277 277.3291 299.6069 C
275.6133 301.6079 274.0547 302.4219 272.7188 305.1377 C
272.3984 305.1216 272.0791 305.105 271.7607 305.0889 C
270.1514 301.1567 256.2725 296.4067 250.9395 298.7295 C
249.5352 299.1958 250.0518 298.7676 249.4268 300.0933 C
247.8438 302.271 250.8506 314.9697 251.3896 317.9785 C
251.2305 317.9702 251.0703 317.9619 250.9102 317.9541 C
248.3115 315.5454 244.2158 316.1699 240.8936 316.4766 C
240.0898 318.4897 238.8477 318.7554 238.25 321.147 C
238.7217 321.3315 239.1934 321.5156 239.6631 321.7002 C
240.1592 322.0874 240.1016 322.0122 241.0771 322.2539 C
242.4072 320.9028 243.5137 319.7461 246.0186 319.624 C
247.7549 321.6108 250.8643 323.209 251.9541 325.6973 c
252.5068 326.9575 251.6074 329.8232 252.666 330.5405 C
253.624 330.5898 254.584 330.6387 255.543 330.689 C
256.1357 329.7163 256.8623 327.9009 257.6572 326.9517 C
257.6484 327.1118 257.6406 327.2715 257.6328 327.4316 C
260.04 329.6729 261.4824 332.3003 266.0146 332.6694 C
266.4014 332.3613 267.1172 332.0957 267.502 331.7842 C
268.6484 330.6909 269.0186 329.3052 269.1855 327.0649 C
267.5527 325.957 265.1143 320.3823 264.8379 318.1899 C
f/BBAccumRotation (0.051427) XT
0.0157 0.3098 0.9686 0 1 0.6824 0 Xa
367.4385 295.1138 m
362.8105 288.874 351.7236 285.2559 354.5977 273.7847 C
356.1543 273.415 356.3164 273.0376 358.4824 273.0244 C
361.498 271.3999 371.6133 275.7876 371.5586 280.4258 C
372.0293 281.5293 368.5938 293.7485 367.4385 295.1138 C
f/BBAccumRotation (0.051427) XT
0 0 0 1 0 0 0 Xa
285.8379 283.7036 m
286.3164 283.7285 286.7959 283.7529 287.2764 283.7778 C
288.1025 282.7163 288.3398 283.1069 288.8359 281.4546 C
291.2402 278.5337 289.8496 261.5015 289.1855 255.999 C
289.3457 256.0073 289.5059 256.0156 289.665 256.0239 C
289.6572 256.1836 289.6484 256.3438 289.6406 256.5034 C
291.9658 259.0464 292.6318 261.8354 297.5186 262.1953 C
298.0283 261.8354 297.6582 262.0322 298.502 261.7656 C
299.5186 259.978 300.0811 259.1948 300.2363 256.0874 C
299.7168 255.0405 300.25 252.7676 301.0361 249.8799 C
301.6553 249.5996 302.0557 249.4092 302.5234 248.9951 C
303.9375 249.5488 305.3506 250.1025 306.7637 250.6563 C
309.0586 258.1895 313.1025 264.0825 322.5938 260.603 C
323.3691 259.2188 324.1396 258.5444 324.709 256.8662 C
325.7002 257.8555 326.9561 258.8677 327.916 259.915 C
329.2188 259.5015 330.5225 259.0884 331.8252 258.6748 C
332.4189 255.1934 335.0449 250.791 338.5 250.3672 C
339.5801 251.8696 343.5352 258.166 344.793 258.8618 C
346.957 260.2793 348.3857 258.1797 348.3447 255.1992 C
348.1357 254.8164 347.8096 252.3203 348.0381 251.8188 C
348.7021 250.3633 348.2734 250.7441 350.0293 250.4795 C
350.0215 250.6396 350.0137 250.7988 350.0059 250.959 C
348.75 251.5938 349.4697 250.8271 348.9727 252.3477 C
353.3555 251.4624 355.2539 255.9185 357.8086 258.0889 c
362.0986 261.7354 367.8877 259.5703 371.7598 257.8467 C
371.5 256.9897 371.6914 257.3755 371.3301 256.8623 C
371.1143 255.7197 370.8604 255.3286 370.4941 254.4165 C
368.3232 254.6279 367.8271 255.3047 365.1475 255.5835 C
364.2471 253.979 363.8145 253.5771 363.9561 250.7158 C
365.4521 249.6719 366.9473 248.627 368.4434 247.582 C
373.291 247.7158 380.6982 247.8848 382.6514 251.6782 c
383.4561 253.2407 382.915 254.8252 383.8672 256.0659 C
383.875 255.9067 383.8838 255.7466 383.8926 255.5864 C
385.2686 254.7358 385.6621 253.8848 386.0068 251.8511 C
385.6514 251.2651 385.6777 251.0254 385.626 249.9082 C
383.6367 248.3604 381.7227 246.2881 379.1367 245.249 c
373.7129 243.0664 362.6855 244.2979 360.6738 249.1055 C
359.4102 250.4883 359.5957 252.4058 359.9238 254.353 C
359.7646 254.3452 359.6035 254.3369 359.4443 254.3286 C
359.4521 254.1685 359.46 254.0093 359.4688 253.8496 C
356.9844 251.5059 353.1836 245.9424 347.252 248.4141 c
345.75 249.04 345.9453 250.2285 343.7734 250.6387 C
342.8564 248.6055 341.498 248.1309 340.1357 246.6055 C
337.4795 246.4521 336.2891 246.8984 334.334 247.2686 C
333.4775 248.5146 329.2344 254.5908 328.1621 255.1216 C
328.1787 254.8018 328.1953 254.4824 328.2119 254.1626 C
327.0371 252.5645 327.8457 250.9473 325.5332 250.1807 C
325.0703 251.3042 325.2998 250.959 324.5 251.5684 C
324.2207 249.3936 320.2422 244.377 317.6807 244.0078 C
316.5928 243.1035 314.6279 243.5879 314.3242 243.835 C
311.5732 244.3447 310.5029 245.7139 309.3096 247.9033 C
296.1309 243.6406 297.5479 249.6563 295.3691 257.2793 C
295.0566 257.1025 294.7461 256.9258 294.4346 256.75 C
293.9609 255.7314 289.4512 244.5537 289.2988 244.4697 C
288.5 244.4287 287.7012 244.3877 286.9014 244.3467 C
286.2412 245.1934 285.917 245.1191 285.3652 246.1895 C
283.8916 248.4873 285.3047 253.5239 285.252 257.7197 c
285.1504 266.1196 285.3398 276.0034 284.9033 283.1748 C
285.7285 283.5205 285.3643 283.291 285.8379 283.7036 C
f/BBAccumRotation (0.051427) XT
338.127 276.3018 m
339.4941 276.2314 340.2354 276.0908 341.0518 275.4912 C
341.2129 275.499 341.3721 275.5073 341.5313 275.5156 C
341.7451 273.7183 342.2061 273.4761 341.2256 272.1353 C
340.6797 271.7222 340.4375 271.7236 339.332 271.5576 C
338.6494 272.1284 338.4521 272.1685 337.3662 272.418 C
337.165 273.208 336.9639 273.999 336.7637 274.79 C
337.7246 275.4077 337.6484 275.1641 338.127 276.3018 C
f/BBAccumRotation (0.051427) XT
249.4023 235.2061 m
249.2793 234.5352 250.1182 234.5469 250.4102 234.2979 C
250.7197 234.8232 249.543 235.0693 249.4023 235.2061 C
n/BBAccumRotation (0.051427) XT
218.8223 231.71 m
217.0918 230.4824 209.7832 230.374 207.8457 230.1846 C
207.2012 225.8057 205 225.0625 202.9688 222.2422 C
203.1279 222.251 203.2871 222.2578 203.4473 222.2676 C
208.1191 226.6113 218.7949 227.123 223.6406 231.4775 C
222.4463 231.8242 220.6504 231.8232 218.8223 231.71 C
n/BBAccumRotation (0.051427) XT
341.7266 225.0586 m
342.2354 224.6982 341.8652 224.8965 342.71 224.6289 C
342.1992 224.9893 342.5693 224.793 341.7266 225.0586 C
n/BBAccumRotation (0.051427) XT
231.2148 215.0449 m
230.749 214.6885 229.3301 214.3291 228.8672 213.9639 C
229.8262 214.0127 230.7852 214.0615 231.7441 214.1113 C
232.1523 214.6523 231.7041 214.1504 232.1992 214.6152 C
231.6895 214.9746 232.0586 214.7773 231.2148 215.0449 C
n/BBAccumRotation (0.051427) XT
152.624 210.5195 m
152.6406 210.1992 152.6572 209.8799 152.6738 209.5605 C
152.9922 209.5771 153.3125 209.5938 153.6328 209.6104 C
153.6162 209.9297 153.5996 210.248 153.583 210.5684 C
153.2637 210.5527 152.9434 210.5352 152.624 210.5195 C
n/BBAccumRotation (0.051427) XT
226.4707 213.8398 m
227.3164 213.46 227.1055 213.4453 227.9082 213.9141 C
227.4297 213.8896 226.9492 213.8643 226.4707 213.8398 C
n/BBAccumRotation (0.051427) XT
0 O
0 0 0 0 1 1 1 Xa
208.1807 345.0728 m
208.6895 344.7124 208.3203 344.9092 209.1641 344.6426 C
208.6543 345.0034 209.0234 344.8066 208.1807 345.0728 C
f/BBAccumRotation (0.051427) XT
178.0234 249.3164 m
177.998 249.7949 177.9736 250.2754 177.9492 250.7539 C
172.7578 253.1689 172.2227 258.0596 170.6465 261.9136 C
171.9297 263.0356 172.8867 264.8271 173.8535 264.9624 C
178.8652 267.0508 180.0137 263.2021 181.29 260.5386 C
183.374 261.9717 183.916 263.4233 187.375 263.7354 C
188.3711 262.4683 188.707 262.8335 188.9854 260.4546 C
185.8613 256.5366 185.8594 249.3799 179.5107 248.4316 C
178.75 249.6143 179.5869 248.9775 178.0234 249.3164 C
f/BBAccumRotation (0.051427) XT
273.5078 224.4316 m
274.0176 224.0723 273.6484 224.2686 274.4922 224.002 C
273.9814 224.3613 274.3525 224.165 273.5078 224.4316 C
f/BBAccumRotation (0.051427) XT
358.2598 211.9727 m
359.1064 211.5918 358.8945 211.5771 359.6982 212.0459 C
359.2188 212.0215 358.7402 211.9971 358.2598 211.9727 C
n/BBAccumRotation (0.051427) XT
360.1777 212.0703 m
361.1357 211.0674 362.0137 211.1611 364.0625 211.3096 C
364.0527 211.4688 364.0449 211.6289 364.0371 211.7891 C
362.751 211.8818 361.4639 211.9766 360.1777 212.0703 C
n/BBAccumRotation (0.051427) XT
365.4746 211.8623 m
366.2979 211.3682 366.0313 211.04 366.4336 211.9121 C
366.1143 211.8955 365.7949 211.8789 365.4746 211.8623 C
n/BBAccumRotation (0.051427) XT
u0 O
0.0157 0.3098 0.9686 0 1 0.6824 0 Xa
152.5605 286.4565 m
151.9648 285.5112 151.9668 286.0049 151.7012 284.4897 C
152.0205 284.5063 152.3398 284.5229 152.6592 284.5391 C
152.6211 285.999 152.9531 285.8726 152.5605 286.4565 C
f/BBAccumRotation (0.051427) XT
u261.7568 228.6328 m
261.9551 227.3926 261.7979 227.6895 264.2031 227.7979 C
264.6729 228.209 264.3262 227.9746 265.1367 228.3262 C
265.1289 228.4854 265.1211 228.6465 265.1123 228.8057 C
263.9941 228.748 262.875 228.6904 261.7568 228.6328 C
f/BBAccumRotation (0.051427) XT
288.1709 229.0313 m
289.0303 228.5586 289.2852 228.5908 290.0889 229.1309 C
289.4502 229.0977 288.8105 229.0645 288.1709 229.0313 C
f/BBAccumRotation (0.051427) XT
302.0977 229.2676 m
302.957 228.7939 303.2109 228.8271 304.0146 229.3652 C
303.376 229.333 302.7363 229.3008 302.0977 229.2676 C
f/BBAccumRotation (0.051427) XT
326.8164 225.252 m
328.3535 224.29 331.0479 224.4629 333.5762 224.6396 C
333.5684 224.7988 333.5605 224.959 333.5518 225.1191 C
331.9102 225.5908 329.1396 225.4053 326.8164 225.252 C
f/BBAccumRotation (0.051427) XT
235 216.2012 m
234.5098 215.8018 233.2676 215.3955 232.6523 215.1191 C
232.6611 214.96 232.6699 214.7988 232.6777 214.6396 C
232.9971 214.6563 233.3174 214.6729 233.6367 214.6895 C
234.1992 215.1865 235.3359 214.6592 235.96 216.252 C
235.6396 216.2344 235.3203 216.2178 235 216.2012 C
f/BBAccumRotation (0.051427) XT
u153.3848 279.77 m
152.7842 276.3379 151.0137 273.3545 150.0195 270.4644 c
147.8643 264.2051 147.7148 258.1289 145.6846 251.9771 C
144.168 251.9028 143.8711 246.3564 144.0869 245.6465 C
143.0137 242.4346 142.3682 236.4561 140.4395 232.4814 C
149.2334 232.415 155.4404 232.9785 164.4072 233.7148 c
170.0078 234.1768 175.6836 233.8564 179.8203 233.0664 C
187.6582 233.3105 195.498 233.5537 203.334 233.7969 C
203.623 235.2354 217.9727 235.5117 221.9297 236.6768 C
221.9219 236.8359 221.9141 236.9961 221.9063 237.1563 C
220.5684 238.9453 218.9512 243.082 219.5693 245.2061 C
214.5752 252.7139 211.4775 261.3159 207.7637 269.1104 c
206.1367 272.5283 206.2109 276.4136 204.8252 279.5332 C
196.4697 274.269 190.8301 277.6943 182.2207 279.812 C
182.3271 276.7964 178.873 275.4888 175.3027 274.1694 c
166.3867 270.8735 159.875 276.3198 153.3848 279.77 C
f/BBAccumRotation (0.051427) XT
271.6533 279.1284 m
270.6563 278.0684 268.6484 277.3467 267.9678 276.0547 c
265.75 271.8452 266.9043 266.605 265.7314 263.4434 C
267.5215 262.751 267.6221 262.1313 270.5996 262.252 C
272.9609 264.6489 276.2627 265.3428 276.4619 269.7627 C
277.5684 271.3423 277.4053 275.3281 276.0918 276.9536 C
275.333 279.0278 274.4707 279.3145 271.6533 279.1284 C
f/BBAccumRotation (0.051427) XT
343.1641 225.1328 m
343.6729 224.7725 343.3047 224.9697 344.1475 224.7031 C
343.6377 225.0645 344.0068 224.8672 343.1641 225.1328 C
f/BBAccumRotation (0.051427) XT
147.3682 377.9907 m
142.6309 375.624 133.8691 366.7891 133.8506 360.4722 C
129.9941 354.0146 141.3594 342.7134 144.5234 339.874 c
146.043 338.5112 146.6465 336.1558 148.6055 335.2773 C
151.0332 338.6387 162.1904 344.5503 162.873 347.5474 C
160.8906 349.2266 161.0566 353.3071 160.0332 356.0522 c
157.4883 362.8789 155.6455 378.0889 153.3457 378.8506 c
151.0459 379.6128 147.3682 377.9907 Y
f/BBAccumRotation (0.051427) XT
242.2227 374.7012 m
240.5742 373.4321 237.9727 373.5806 236.0898 372.4639 c
228.9102 368.2046 223.8828 360.0664 219.7939 352.8804 c
218.2734 350.2065 215.457 348.0332 214.9414 344.4595 C
216.8945 343.7915 216.2598 342.9395 218.874 342.7397 C
221.9023 345.3882 227.2207 345.2515 230.6367 347.6709 c
235.5586 351.1548 239.4336 357.2876 242.8643 362.2383 c
244.5107 364.6138 248.8184 370.2266 246.6348 373.0063 C
245.9531 374.1572 246.8242 373.3433 245.627 373.9155 C
244.6641 374.7178 244.0771 374.7476 242.2227 374.7012 C
f/BBAccumRotation (0.051427) XT
178.2637 347.3779 m
175.2695 345.3374 170.6875 345.5337 167.3867 343.9341 c
158.5684 339.6636 147.2988 330.1987 144.0488 321.104 c
138.2803 304.9653 148.4736 289.6177 160.2559 286.3721 c
165.5664 284.9082 176.1328 286.3604 181.3477 287.4575 c
183.373 287.8833 190.5117 287.5273 190.959 287.4712 c
195.0586 286.959 206.3691 290.8687 208.043 291.7153 C
212.793 299.6436 221.209 308.9912 223.9922 318.0098 c
226.0684 324.7358 220.3438 334.0117 215.8887 335.376 C
215.3564 335.71 215.4219 335.6411 214.4258 335.7817 C
211.8809 332.9072 206.8105 329.8608 202.7139 329.8916 C
201.3027 331.1904 200.5205 330.9585 200.1191 333.6035 C
198.4863 336.3359 200.7891 341.0591 198.1133 344.5547 C
194.3203 347.7134 183.6934 347.6919 178.2637 347.3779 C
f/BBAccumRotation (0.051427) XT
263.3604 328.2075 m
260.7441 324.2231 258.2129 321.4771 255.7783 316.7627 C
255.9395 316.7705 256.0977 316.7788 256.2568 316.7871 C
259.2402 320.6738 263.2275 322.4336 264.3193 328.2563 C
263.999 328.2402 263.6797 328.2236 263.3604 328.2075 C
f/BBAccumRotation (0.051427) XT
255.373 315.2998 m
255.2969 311.0762 253.7637 305.7495 254.1221 302.2573 C
259.3506 301.978 269.2891 304.1553 269.5469 310.7417 C
267.5654 313.1558 268.2314 315.0459 263.5723 314.7598 C
262.3975 313.5278 260.832 313.1816 258.373 313.0503 C
257.459 314.1504 257.0986 314.9551 255.373 315.2998 C
f/BBAccumRotation (0.051427) XT
197.793 285.4194 m
195.1016 283.564 187.9736 284.1055 185.8838 283.3652 C
186.0684 282.8936 186.252 282.4224 186.4365 281.9517 C
190.127 280.4814 203.0762 278.6758 204.0488 285.2612 C
203.0498 285.5527 201.7852 285.6226 200.1904 285.543 C
199.7432 285.2373 199.2754 285.4448 197.793 285.4194 C
f/BBAccumRotation (0.051427) XT
159.9727 282.5122 m
159.377 281.5669 159.3789 282.0615 159.1133 280.5444 C
163.6719 278.3989 172.2305 274.229 175.9893 279.4912 C
176.5918 280.3301 176.6963 281.0391 176.7998 282.4165 C
176.0605 282.6362 175.9707 282.6987 174.8574 282.7974 C
173.4297 281.9478 163.3086 281.5347 159.9727 282.5122 C
f/BBAccumRotation (0.051427) XT
144.3652 268.2505 m
144.541 270.752 145.5723 273.0537 146.417 275.0859 C
143.7148 276.7173 143.1367 277.1714 139.1279 276.6323 C
137.8867 274.9087 136.9541 275.3145 136.9531 272.1953 C
138.1133 271.0903 138.5732 269.8481 140.002 268.9873 C
141.1133 268.1836 142.3506 268.1484 144.3652 268.2505 C
f/BBAccumRotation (0.051427) XT
219.3535 277.3979 m
217.251 275.2549 212.1953 272.6582 212.0293 270.292 C
212.9824 269.5313 212.9199 268.5933 214.0703 267.9937 C
216.4121 271.0586 219.8877 272.5542 220.3125 277.4473 C
219.9932 277.4307 219.6738 277.4146 219.3535 277.3979 C
f/BBAccumRotation (0.051427) XT
316.4355 258.8438 m
315.9404 258.457 315.9971 258.5322 315.0225 258.2905 C
314.6357 257.6978 314.6563 257.731 314.1133 257.2822 C
314.4063 256.5693 314.4775 256.4873 314.6914 255.3887 C
317.5654 254.8237 318.957 253.0649 321.5742 252.3799 C
321.5342 253.1777 321.4932 253.9771 321.4521 254.7759 C
320.5342 255.6997 320.166 257.498 319.791 259.0166 C
318.6729 258.959 317.5547 258.9009 316.4355 258.8438 C
f/BBAccumRotation (0.051427) XT
313.3516 253.3979 m
312.1406 250.1387 313.0557 248.7783 315.1357 246.7607 C
315.96 247.1064 315.5967 246.877 316.0684 247.29 C
317.3271 247.9336 317.4893 248.3574 317.8633 249.7852 C
318.0225 249.7939 318.1836 249.8018 318.3428 249.8105 C
318.793 250.3184 317.8467 250.2588 317.8389 250.2646 C
317.1133 252.167 315.4727 253.1006 313.3516 253.3979 C
f/BBAccumRotation (0.051427) XT
252.7334 235.8594 m
252.1885 235.4443 251.9473 235.4473 250.8408 235.2803 C
250.8486 235.1211 250.8564 234.9609 250.8652 234.8018 C
251.0254 234.8105 251.1855 234.8184 251.3447 234.8262 C
255.1973 232.7676 265.4902 234.0557 272.0313 234.4482 C
272.0234 234.6094 272.0146 234.7686 272.0068 234.9277 C
271.4648 235.3379 271.9688 234.8887 271.502 235.3828 C
266.6289 234.3662 259.5078 236.1689 252.7334 235.8594 C
f/BBAccumRotation (0.051427) XT
158.3984 229.0811 m
157.6904 228.3252 157.5361 228.6621 157.0332 227.5684 C
157.0225 227.2471 157.0273 225.5732 157.6611 224.7168 C
158.1484 223.4346 158.5518 223.3506 159.2227 222.3945 C
162.4824 223.4219 166.4766 224.3398 166.5469 229.499 C
164.3027 228.9395 160.9629 228.8379 158.3984 229.0811 C
f/BBAccumRotation (0.051427) XT
195.3828 229.543 m
195.584 228.752 195.7852 227.9609 195.9844 227.1699 C
198.2227 226.332 199.6621 226.2949 201.8125 226.0283 C
202.5684 227.457 203.2705 227.9658 203.5322 229.9619 C
200.8164 229.8223 198.0986 229.6816 195.3828 229.543 C
f/BBAccumRotation (0.051427) XT
325.8184 235.2949 m
325.0625 234.7725 322.7813 234.6768 322.0332 234.1396 C
333.3975 234.584 343.7461 231.4629 351.9023 232.792 C
351.8936 232.9521 351.8857 233.1113 351.877 233.2715 C
347.6035 233.8057 345.2852 234.374 341.6875 235.1504 C
339.7695 235.0518 337.8516 234.9531 335.9346 234.8545 C
333.8672 235.1533 328.0254 234.7939 325.8184 235.2949 C
f/BBAccumRotation (0.051427) XT
257.9473 227.9561 m
254.4023 225.5742 249.9521 227.2344 246.0361 225.9014 c
238.877 223.4648 233.5488 221.2598 226.1992 219.1133 C
226.207 218.9521 226.2148 218.793 226.2236 218.6328 C
226.7031 218.6572 227.1836 218.6816 227.6611 218.707 C
228.9629 219.6563 230.5723 219.2334 232.4063 219.9121 c
238.1416 222.0361 244.6807 223.127 250.4004 225.165 c
253.1143 226.1318 258.5889 225.79 259.8643 228.0547 C
259.2246 228.0225 258.585 227.9893 257.9473 227.9561 C
f/BBAccumRotation (0.051427) XT
291.5264 229.2051 m
292.4844 228.2012 293.3633 228.2949 295.4111 228.4434 C
295.7979 228.1904 300.7305 227.3438 301.6182 229.2432 C
299.8604 229.1523 298.1025 229.0615 296.3447 228.9717 C
294.6484 229.834 293.0146 228.8818 291.5264 229.2051 C
f/BBAccumRotation (0.051427) XT
335.1982 230.4902 m
335.7061 230.1309 335.3389 230.3271 336.1816 230.0605 C
335.6729 230.4219 336.041 230.2236 335.1982 230.4902 C
f/BBAccumRotation (0.051427) XT
268.7148 224.1855 m
265.4512 222 260.4746 222.791 257.7637 222.1787 c
251.4629 220.7559 243.1895 219.0967 236.4385 216.2754 C
236.4473 216.1152 236.4551 215.9561 236.4639 215.7969 C
236.7822 215.8125 237.1025 215.8291 237.4219 215.8457 C
239.4893 217.2559 244.3789 217.3867 245.9766 217.7275 c
251.4189 218.8867 258.9238 220.8203 264.4746 222.5244 c
266.9795 223.2939 269.417 222.5439 271.1357 223.8281 C
269.8799 223.8408 269.498 223.9512 268.7148 224.1855 C
f/BBAccumRotation (0.051427) XT
103.8379 215.2178 m
104.3477 214.8574 103.9785 215.0537 104.8223 214.7871 C
104.3125 215.1475 104.6816 214.9512 103.8379 215.2178 C
f/BBAccumRotation (0.051427) XT
127.8066 216.4512 m
128.6299 215.957 128.3623 215.6299 128.7656 216.501 C
128.4453 216.4844 128.127 216.4678 127.8066 216.4512 C
f/BBAccumRotation (0.051427) XT
101.9453 214.6396 m
102.4551 214.2783 102.0859 214.4756 102.9297 214.21 C
102.4199 214.5693 102.7891 214.373 101.9453 214.6396 C
f/BBAccumRotation (0.051427) XT
129.2695 216.0469 m
130.1289 215.5723 130.3848 215.6055 131.1865 216.1445 C
130.5479 216.1113 129.9082 216.0791 129.2695 216.0469 C
f/BBAccumRotation (0.051427) XT
297.5996 223.2686 m
295.6426 221.96 292.6641 222.6768 289.9785 221.915 c
282.9678 219.9229 267.3076 219.9229 263.7871 217.2021 C
276.1836 217.6162 286.7832 217.377 296.3105 220.3184 c
299.3496 221.2568 305.8906 220.3857 307.2363 222.8027 C
305.958 222.7373 304.6797 222.6719 303.4014 222.6064 C
302.252 223.2432 298.8652 222.9277 297.5996 223.2686 C
f/BBAccumRotation (0.051427) XT
334.0313 225.1436 m
334.9414 224.5527 336.541 224.6533 337.3877 225.3164 C
336.2686 225.2588 335.1504 225.2021 334.0313 225.1436 C
f/BBAccumRotation (0.051427) XT
337.8662 225.3418 m
338.375 224.9814 338.0059 225.1777 338.8496 224.9111 C
338.3398 225.2715 338.71 225.0742 337.8662 225.3418 C
f/BBAccumRotation (0.051427) XT
111.251 211.2734 m
107.7344 209.0068 101.8438 210.9336 99.918 207.3262 C
99.4219 206.8633 99.877 207.3604 99.4639 206.8223 C
101.541 206.9287 103.6182 207.0361 105.6953 207.1426 C
107.9639 206.0498 113.8105 207.5957 117.7051 207.2803 c
124.0254 206.7676 144.6689 209.0156 148.334 209.8184 c
149.5996 210.0938 150.7441 209.4893 152.1445 210.4941 C
149.8711 210.6426 146.3057 211.085 143.9219 211.5137 c
141.2637 211.9902 132.8291 210.8574 129.9951 211.2773 c
121.8398 212.4844 118.0098 209.2588 111.251 211.2734 C
f/BBAccumRotation (0.051427) XT
320.377 219.6348 m
319.6211 219.1113 317.3389 219.0176 316.5908 218.4785 C
319.2109 218.6055 322.125 218.2324 324.3096 217.915 c
326.3809 217.6133 332.5146 218.7305 336.3438 217.5723 C
332.7539 221.2764 325.4834 218.6963 320.377 219.6348 C
f/BBAccumRotation (0.051427) XT
161.8555 208.5908 m
161.8711 208.2715 161.8887 207.9521 161.9043 207.6318 C
162.3848 207.6563 162.8633 207.6816 163.3438 207.7061 C
163.335 207.8662 163.3262 208.0264 163.3184 208.1855 C
162.8301 208.3203 162.3428 208.4561 161.8555 208.5908 C
f/BBAccumRotation (0.051427) XT
233.2813 212.2676 m
233.3047 211.7881 233.3301 211.3086 233.3545 210.8291 C
234.002 210.7021 234.6494 210.5762 235.2969 210.4482 C
235.2803 210.7686 235.2637 211.0879 235.2471 211.4072 C
234.377 211.8242 234.4102 211.9688 233.2813 212.2676 C
f/BBAccumRotation (0.051427) XT
236.71 211.002 m
237.5693 210.5293 237.8242 210.5625 238.627 211.1006 C
237.9893 211.0684 237.3486 211.0352 236.71 211.002 C
f/BBAccumRotation (0.051427) XT
272.7109 211.8936 m
270.8691 210.666 267.2861 211.0947 265.5449 211.0439 c
263.6318 210.9893 260.4893 209.4238 258.4297 209.2363 c
254.0908 208.8408 241.7188 207.6436 238.4688 204.8447 C
248.9912 205.2158 255.7617 206.4189 264.7354 208.1191 c
270.3555 209.1846 282.4053 209.1279 288.1748 210.2861 c
290.4482 210.7432 297.416 209.9316 298.1914 211.7637 C
293.0127 211.6396 286.7559 211.9248 283.2568 212.4365 c
278.9365 213.0693 276.0684 210.9561 272.7109 211.8936 C
f/BBAccumRotation (0.051427) XT
323.0693 214.0049 m
323.4893 212.2246 327.6797 212.7373 330.8379 212.4824 c
338.1309 211.8955 351.2168 213.5352 357.8057 211.4678 C
357.7891 211.7871 357.7725 212.1074 357.7559 212.4268 C
346.1953 212.9521 334.6309 213.4795 323.0693 214.0049 C
f/BBAccumRotation (0.051427) XT
166.8223 205.4824 m
166.1045 204.9404 164.8887 204.8867 163.4902 204.8301 C
163.498 204.6699 163.5078 204.5107 163.5156 204.3516 C
163.835 204.3682 164.1553 204.3848 164.4746 204.4004 C
165.0664 204.0703 173.3887 204.2051 174.9961 205.4229 C
171.7559 205.1846 168.248 205.2217 166.8223 205.4824 C
f/BBAccumRotation (0.051427) XT
UU156.5254 312.1338 m
156.3984 311.4868 156.2715 310.8389 156.1455 310.1924 C
156.3047 310.2002 156.4648 310.2085 156.625 310.2168 C
156.6084 310.5366 156.5918 310.855 156.5752 311.1753 C
156.8301 311.5308 157.2656 311.231 157.0059 312.1587 C
156.8457 312.1504 156.6855 312.1421 156.5254 312.1338 C
f/BBAccumRotation (0.051427) XT
U366.9385 211.457 m
367.4473 211.0977 367.0781 211.2939 367.9219 211.0273 C
367.4121 211.3867 367.7813 211.1904 366.9385 211.457 C
n/BBAccumRotation (0.051427) XT
0 O
0 0 0 1 0 0 0 Xa
156.5371 321.2661 m
167.2422 319.7373 160.6602 309.6572 159.3174 304.5879 C
158.3301 304.6079 155.2373 303.2896 154.0693 303.8364 C
151.3301 304.1094 148.3379 307.1699 149.3594 311.2842 c
150 313.8589 151.4355 317.9263 153.7344 319.6802 c
154.7246 320.4355 155.7236 320.4541 156.5371 321.2661 C
f/BBAccumRotation (0.051427) XT
186.5283 317.5239 m
188.123 317.1069 190.9648 316.9619 191.9736 314.439 C
194.4277 311.7007 191.9541 305.1675 188.6816 303.6958 C
187.2637 302.6494 186.4102 303.564 185.3008 304.0024 c
180.585 305.8687 180.9121 310.916 182.3379 314.9048 C
183.5234 315.6367 185.4648 316.5449 186.5283 317.5239 C
f/BBAccumRotation (0.051427) XT
169.5469 292.6172 m
164.252 291.8599 160.8906 294.6626 160.0195 300.2979 C
160.8301 300.6279 161.5078 300.8022 162.8711 300.9258 C
163.3799 300.5649 163.0107 300.7617 163.8535 300.4956 C
164.7129 294.563 168.7451 297.6675 169.5469 292.6172 C
f/BBAccumRotation (0.051427) XT
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
