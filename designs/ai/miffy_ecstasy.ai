%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (george g rat) ( )
%%Title: (miffy_ecstasy.ai)
%%CreationDate: (5/3/2001) (1:33 PM)
%%BoundingBox: -37 -93 200 422
%%HiResBoundingBox: -36.5762 -92.8965 199.4082 421.8311
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: MomsTypewriter
%%DocumentNeededFonts: MomsTypewriter
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 88 100 88 100
%AI3_TileBox: -207.5 -256.5 384.5 487.5
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -489.5 725.5 0.5 640 607 18 1 1 100 125 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:-207.5 -256.5
%%AI3_PaperRect:-8 784 604 -8
%%AI3_Margin:8 -40 -9 8
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 60 128 8
%%BeginData: 13416 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3AF852FFF8F8FD3620F8F827FFF820B4FD08BB994BFD22BB446F
%FD06BBB592F852FFF820B4A7C9A7C9A7C9A7C97CF8A7C9A7C9A7C9A7C9A7
%C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9F826A7C9A7
%C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9A7F8CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9F851CFC9CF
%C9CFC9C392F852FFF820B4C9C9A7C9C9C9A7C9A0F8A7C9C9C9A7C9C9A127
%F827C9A7C9C9C9A7C9C9C9A7C9C9C9A72726F852C9C9C9A7C92727A7C9C9
%C9A7C9C968F827FFF820B4CFC9CAC9CFC9CAC97DF8CAC9CFC9CAC97D277D
%A8F852CAC9CFC9CAC9CFC9CAC9CFC9F87DA8FFF87CCFC9CAC9F852CAC9CF
%C9CAC9C292F827FFF820B4A7C9A7C9A7C9A7C97CF8A7C9A7C9A7C9F87DFF
%FFFFF87DC9A7C9A7C9A7C9A7C9A72627A8A8CBFFF8A7C9A7C9F826A7C9A7
%C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9A7F8CFC9CFC9CF7C27FD04
%FFA8F8C9CFC9CFC9CFC9CFC9A727A8FD04FFA827C9CFC9F852CFC9CFC9CF
%C9C392F852FFF820B5A7C9C9C9A7C9C9C97CF8C9C9A7C9C9F8FD05FFA852
%51A7C9C9C9A7C9C9C92727FD05FFA827A0C9A0F827C9C9A7C9C9C9C368F8
%27FFF820B4CAC9CFC9CAC9CFC9A1F8A7C9CAC97D7DFD06FFA827CAC9CFC9
%CAC9CFC9F8FD07FF7D51CFA1F852CFC9CAC9CFC9C392F852FFF820B4A7C9
%A7C9A7C9A7C97CF87CC9A7C927A8FFFFA8FD04FF277CC9A7C9A7C9A7207D
%FFA8FFFFFFA8FFFFF8A77CF827A7C9A7C9A7C9C368F827FFF820B4CFC9CF
%C9CFC9CFC9A7F8A7C9CFC927FD09FF27C9CFC9CFC9CF27FD09FF51A7A1F8
%52CFC9CFC9CFC9C392F852FFF820B4C9C9A7C9C9C9A7C9C9F87CC9C951A8
%FD08FFA827A1A7C9C9C97C27FD09FF277C7CF827A7C9C9C9A7C9C968F827
%FFF820B4CFC9CAC9CFC9CAC9CFF8A1C9CF27CBFD09FF52A0CAC9CFC927A8
%FD09FFA84BA1F852CAC9CFC9CAC9C292F827FFF820B4A7C9A7C9A7C9A7C9
%A7F87CC9A7F8FFFFA8FFFFFFA8FFFFFFA820A7C9A7A0F8A8A8FFFFFFA8FF
%FFFFA877277CF826A7C9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9
%CFF8A7C9A7A8FD0AFFA827CFC9CFA127FD0BFFF8A1F852CFC9CFC9CFC9C3
%92F852FFF820B5A7C9C9C9A7C9C9C9A7F8A0C97C7DFD0BFFF8C9C9A7277D
%FD0AFFA8277CF827C9C9A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9CFC9
%CAF87DC94BFD0CFF4CA7C9CA27A8FD0BFFF8A1F876CFC9CAC9CFC9C392F8
%52FFF820B4A7C9A7C9A7C9A7C9A7F87CC9277DA8FFFFFFA8FFFFFFA8FFFF
%277CC9A7F8CBFFFFFFA8FFFFFFA8FFFF7D277CF851A7C9A7C9A7C9C368F8
%27FFF820B4CFC9CFC9CFC9CFC9CFF8A7C9F8FD0CFF5251C9A727FD0BFFA8
%51A1F8A1CFC9CFC9CFC9C392F852FFF820B4C9C9A7C9C9C9A7C9C9F87CC9
%27A8FD0BFF2751C9A027FD0BFF7D517CF87CA7C9C9C9A7C9C968F827FFF8
%20B4CFC9CAC9CFC9CAC9CFF8A1C927FD0CFF524BC9277DFD0BFF52A1A1F8
%A1CAC9CFC9CAC9C292F827FFF820B4A7C9A7C9A7C9A7C9A7F87CC926A8FF
%FFA8FFFFFFA8FD04FF2751C92777FFFFA8FFFFFFA8FD04FFF8A77CF87CA7
%C9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9CFF8A7C9F8FD0CFF52
%51C927A8FD0AFFA827CFA1F8A1CFC9CFC9CFC9C392F852FFF820B5A7C9C9
%C9A7C9C9C97CF8A0C927A8FD0BFF2751C9277DFD0AFFA8F8C97CF87CC9C9
%A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9CFC9A1F87DC9F8A8FD0BFF4C
%52C9F8FD0BFF7D7CCFA1F8A1CFC9CAC9CFC9C392F852FFF820B4A7C9A7C9
%A7C9A7C97CF87CC9277DA8FFFFFFA8FFFFFFA8FFFFF87CC927A8A8FFFFFF
%A8FFFFFFA8A827A0A77CF87CA7C9A7C9A7C9C368F827FFF820B4CFC9CFC9
%CFC9CFC9A7F8A7C9277DFD0BFF26A7C9F8FD0BFFF8C9CFA1F8A1CFC9CFC9
%CFC9C392F852FFF820B4C9C9A7C9C9C9A7C9A0F87CC95127FD0BFFF8A7C9
%F8A8FD09FF7D27C9A77CF87CA7C9C9C9A7C9C968F827FFF820B4CFC9CAC9
%CFC9CAC97DF8A1C97DF8FD0AFFA827CAC9F8FD0AFF527CC9CAA1F8A1CAC9
%CFC9CAC9C292F827FFF820B4A7C9A7C9A7C9A7C97CF87CC9A7F8FFFFA8FF
%FFFFA8FFFFFFCB20A7C9F8A8FFFFA8FFFFFFA8FFFFF8A7C9A77CF87CA7C9
%A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9A7F8A7C9CF27A8FD09FF
%A827A7C9F8FD09FFA227CFC9CFA1F8A1CFC9CFC9CFC9C392F852FFF820B5
%A7C9C9C9A7C9C9C97CF8A0C9A7F87DFD09FFA8FD04F8A8FD07FFA8274BA7
%C9C97CF87CC9C9A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9CFC9A1F8A7
%C9CA2727FD0BFFA8FFA8FD09FFF8A7CAC9CFC9F8A1CFC9CAC9CFC9C392F8
%52FFF820B4A7C9A7C9A7C9A7C97CF8A7C9A7F87DCBFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFA8F84BA7C9A7C9F87CA7C9A7C9A7C9C368F8
%27FFF820B4CFC9CFC9CFC9CFC952F8CFC9527DFD18FFA85227C9CFC9F87D
%CFC9CFC9CFC9C392F852FFF820B4C9C9A7C9C9C9A7C951F85220A8A8FD19
%FFA852F87CA0F827A7C9C9C9A7C9C968F827FFF820B4CFC9CAC9CFC9CAC9
%27F8F8FD1DFFCBA8F827F852CAC9CFC9CAC9C292F827FFF820B4A7C9A7C9
%A7C9A7C9F8F8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8CBFFF8F826A7C9A7C9A7C9C368F827FFF820B4CFC9CFC9
%CFC9CFC9F852FD22FFF852CFC9CFC9CFC9C392F852FFF820B5A7C9C9C9A7
%C9C920F827FD22FF27F8C9C9A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9
%FD047DFD22FF2727A7C9CAC9CFC9C392F852FFF820B4A7C9A7C9A7C926A8
%FF27A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8CB27F827C9A7C9A7C9C368F827FFF820B4CFC9CFC9CF7C27FF
%FF52FD22FF27FF2752CFC9CFC9C392F852FFF820B4C9C9A7C9C9F8A8FFFF
%27FD22FF52A8FFF8C9C9A7C9C968F827FFF820B4CFC9CAC95227FFFFCB52
%FD22FF52FFFF277CC9CAC9C292F827FFF820B4A7C9A7C92727FFFFFF27FF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFF7DA8FF7D27C9A7C9C368F827FFF820B4CFC9CFC9F8FD04FFA8FD22
%FF7DFFFFFFF8C9CFC9C392F852FFF820B5A7C9C9A1F8A8FFFFFF7DFD22FF
%7DA8FFA8F8C9C9C9C368F827FFF820B4CAC9CFA1F8FD04FFA2FD22FFA8A8
%FFFFF8C9CFC9C392F852FFF820B4A7C9A727F8A8A8FFFF52A8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7D
%A8A8F87CA7C9C368F827FFF820B4CFC9CF52F8FD04FF52FFFFA8A8A8FD16
%FF2752FD05FFA8A8FFFFF8A1CFC9C392F852FFF820B4C9C9A727F8A8FFFF
%FF52FFFF27F8F8FD15FF52F8F827FD05FF7DFFA8F8A0A7C9C968F827FFF8
%20B4CFC9CA52F8FFFFFFCB7DFFFF27F8F8FD15FF27F8F87DFD04FF7DFFFF
%FFF8C9CAC9C292F827FFF820B4A7C9A751F8A8FFFFFF27FFFF27F852FFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7DF827FFA8FFFFFF7DA8FF
%A8F8C9A7C9C368F827FFF820B4CFC9CFA7F8FD04FF52FD22FF7DFFFFFF27
%C9CFC9C392F852FFF820B5A7C9C9C9F8A8FFFFFF27FD22FFA8A8FF527CC9
%C9C9C368F827FFF820B4CAC9CFC9277DFFFFFFA2FD22FF7DFFA852CAC9CF
%C9C392F852FFF820B4A7C9A7C97CF8FFFFFF7DA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8CB7DA8CB20A7C9A7
%C9C368F827FFF820B4CFC9CFC9CF27A8FFA8A8FD22FF7DA827C9CFC9CFC9
%C392F852FFF820B4C9C9A7C9C951F8A8A87DFD0BFF7D5227FFFFFFA827F8
%7DFD0DFF7DF827C9C9C9A7C9C968F827FFF820B4CFC9CAC9CFC9F852A252
%FD0BFFA8F8F8F82727F8F827A8FD0DFF2727A1C9CFC9CAC9C292F827FFF8
%20B4A7C9A7C9A7C9A7F8F827FFFFA8FFFFFFA8FFFFFFA8FF7DFD06F852FF
%FFA8FFFFFFA8FFFFFFA8FFFFA82720A7C9A7C9A7C9C368F827FFF820B4CF
%C9CFC9CFC9CFA7F852FD0BFFA8F8F8F87D5227F827FD0DFFA8F852CFC9CF
%C9CFC9C392F852FFF820B5A7C9C9C9A7C9C9C927F852CBFD09FFA8A8FD06
%FFA8FD0BFFA87D51F827C9C9A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9
%CFC9F8F827277DFD19FFCBFF5252A7A7F852CFC9CAC9CFC9C392F852FFF8
%20B4A7C9A7C9A7C9A7C92726A7F8F8F87DA8FFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8A8FF7D27F8F8A1A77CF827A7C9A7C9A7C9C368F827FFF8
%20B4CFC9CFC9CFC9CFC9272776F86820F84A4BA8A8FD0BFFCBFFA8A85227
%20F8F8B58C4BA1A7F852CFC9CFC9CFC9C392F852FFF820B4C9C9A7C9C9C9
%A7C951F8F868B4FC44F8B4B5B468442727277D7D7D264B2720206E8CB48C
%B4F8B4B4B48CF851F827A7C9C9C9A7C9C968F827FFF820B4CFC9CAC9CFC9
%CAC9F8F88CB4B5B4B492F893B4B4B4B5B492F820686EB5B5B4B4B5B4B5B4
%20B5B5B4B5B48CF8F827CAC9CFC9CAC9C292F827FFF820B4A7C9A7C9A7C9
%A7A0F8F8B4B4FCB4FCB4B46820208C8C44F8448CB48C448CB48CB48C6844
%B4FCFCB4FC8C682777F87CC9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9
%CF27272720B5B5B4B5B4B5B5B4B58CB5B4B46893B4B4B4B58C926893B4B5
%B5B4B5B4B5BCA8FFFFFFF8A7CFC9CFC9C392F852FFF820B5A7C9C9C9A7A0
%26A8FFA8FF27B4B4B4B5FCB4B4B5FCB4B48C9E9E4A8CFCB4B4B4FCB4B4B5
%FCB4B4B5B47DFD05FFF8A7C9C9C9C368F827FFF820B4CAC9CFC9CA7627FD
%05FF68B4B5B4B5B4B5B4B5B4B593C6FE4AB5B5B4B5B4B5B4B5B4B5B4B5B4
%8CFD05FFCB27CAC9CFC9C392F852FFF820B4A7C9A7C9A7F8A8CBFFFFA8A8
%208CFCB4FCB4FCB4FCB4FC8C205092FCFCB4FCB4FCB4FCB4FCB4FCFC93FF
%A8FD04FFF87DC9A7C9C368F827FFF820B4CFC9CFC9CF27A8FD05FF27B5B5
%B4B5B4B5B4B5B4B5B4B4B5B4B4B5B4B5B4B5B4B5B4B5B4B5B54BFD06FF52
%A7C9CFC9C392F852FFF820B4C9C9A7C9C9F8FD06FF278CFCB4B4B5FCB4B4
%B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FCFC4BFD06FF27A0C9A7C9C968
%F827FFF820B4CFC9CAC9CFF8A8FD05FF52B5B5B4B5B4B5B4B5B4B5B4B5B4
%B5B4B5B4B5B4B5B4B5B4B5B4B5B44BFD06FFA27DC9CAC9C292F827FFF820
%B4A7C9A7C9A7F8FFFFA8FFFFFF7D8CFCB4FCB4FCB4FCB4FCB4FCB4FCB4FC
%B4FCB4FCB4FCB4FCB4FCFC4BA8FFFFA8FFFF277CC9A7C9C368F827FFF820
%B4CFC9CFC9CF27A8FD05FF27B5B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5
%B4B5B4B5B4B5B4B5B444FD06FF52CFC9CFC9C392F852FFF820B5A7C9C9C9
%A7267DFD04FFCB68FCB4B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4
%B5FCB4B4B5B44BFFFFFFA87D27A7C9C9C9C368F827FFF820B4CAC9CFC9CA
%C926FFFFFFCB7DB4B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5
%B4B5B4B5B4B5B427FFA852F8C9CAC9CFC9C392F852FFF820B4A7C9A7C9A7
%C97CF8F8F86F8CB4B4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FC
%B4FCB4FCB4FCB4FC8C20F827C9A7C9A7C9C368F827FFF820B4CFC9CFC9CF
%C9CF27F8F8FCB4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5
%B4B5B4B5B4B5B4B5B568F851C9CFC9CFC9C392F852FFF820B4C9C9A7C9C9
%C9A7F8F820FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FC
%B4B4B5FCB4B4B5FCB46EF827C9C9C9A7C9C968F827FFF820B4CFC9CAC9CF
%C9A1F8F84AB4B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5
%B4B5B4B5B4B5B4B5B444F8F8C9CFC9CAC9C292F827FFF820B4A7C9A7C9A7
%C97CF8F8F8B4B4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FCB4FC
%B4FCB4FCB4FCB4FCFC20F827C9A7C9A7C9C368F827FFF820B4CFC9CFC9CF
%C97CF8F826B4B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5B4B5
%B4B5B4B5B4B5B4B5B420F827C9CFC9CFC9C392F852FFF820B5A7C9C9C9A7
%C9C9F8F8F86E8CB48CB4B4FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4B5FCB4B4
%B5FCB4B4B5FCFCB48C20F87CC9A7C9C9C9C368F827FFF820B4CAC9CFC9CA
%C9CFC9FD05F82020938CB48CB5B4B4B4B5B5B4B5B4B5B4B5FD04B4B5B4B4
%8CB5686EF8F8F820A8C9CAC9CFC9C392F852FFF820B4A7C9A7C9A7C9A7C9
%27F8F8F827A8CB7D7D52272727202020444468686E6844FD0420F827277D
%7727FD04F826A7C9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC926F8
%F827FD0AFFCBFFFFFF277DA8A87DA8FD09FF27F8F8F84BCFC9CFC9CFC9C3
%92F852FFF820B4C9C9A7C9C9C9A7C9F8F8F852FD0EFFA8A8FD0DFFA8F8F8
%F826A7C9C9C9A7C9C968F827FFF820B4CFC9CAC9CFC9CAC9F8F8F8FD0FFF
%A8A2FD0EFFF8F8F84BCAC9CFC9CAC9C292F827FFF820B4A7C9A7C9A7C9A7
%C9F8F8F8A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFF27A8FFFFFFA8FFFFFFA8
%FFFFFFA8CB27F8F8F8A7C9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CF
%C9F8F8F8FD0FFFA852FD0EFF27F8F84BCFC9CFC9CFC9C392F852FFF820B5
%A7C9C9C9A7515127F8F8F87DFFA8FFA8FD07FFA8FFA8A827FFA8FD0BFFA8
%FD04F8A0C9A7C9C9C9C368F827FFF820B4CAC9CFC9CA20F84BFD09F84C27
%52274C2727FD07F827274C2752274C27522727FD05F82720C9CFC9C392F8
%52FFF820B4A7C9A7C97DF8A1C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7
%A7A7C9A7A7A17CA17CA17CA17CA17CA17CA17CA17CC976F8C9A7C9C368F8
%27FFF820B4CFC9CFC9A7F8CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCAF8A7CFC9C392F8
%52FFF820B4C9C9A7C976F8FD04C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9
%A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A77CF8A0A7C9C968F827
%FFF820B4CFC9CAC97DF8A0C9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9
%CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CA76F8C9CAC9C292F827
%FFF820B4A7C9A7C97CF82727525176515251A07CA17CA17CA17CA17CA17C
%A17CA17CA17CA17CA17CA17CA17CA17CA17CA17C7627F8C9A7C9C368F827
%FFF820B4CFC9CFC9CFA12727FD11F827F827F827F827FD07F827F827FD05
%F8277CC9CFC9C392F852FFF820B5A7C9C9C9A7C9C976FD04F8A77CA07C7C
%7CA07C7C7CA07CA7C9C9C9A7C9C9C9A77CA0275151A0A1A7A07CF8F8F852
%C9A7C9C9C9C368F827FFF820B4CAC9CFC9CAC9CFC9A1767DC9CAC9CFC9CA
%C9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFA74BA1CF
%C9CAC9CFC9C392F852FFF820B4A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7
%C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7C9A7
%C9A7C9A7C9C368F827FFF820B4CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9C392F852FFF820B4C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9
%C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7
%C9C9C9A7C9C968F827FFF820B4CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CF
%C9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CA
%C9CFC9CAC9C292F827FFF820688C688C688C688C688C688C688C688C688C
%688C688C688C688C688C688C688C688C688C688C688C688C688C688C688C
%688C688C688C44F827FFFD3AF852FFFD3A2752FD58FFA8A8FD3AFF5252FD
%25FFA87D7DFD05FFA8A8FD0AFF7D27F8A87DFD04FFA8527D7DFD1AFF7D27
%527D27A8FFA827F8F8277DFFFF7DF8275252FD06F852FFFF7DF852F8F852
%FFFFA827F8277D7DFF525227A85227F8A8FD07FFA827A8FFFF5227FFF8F8
%7D7DF8F8A8A8F8A87D27F8A8A852F8A87DFFFFFFF827FFFF27F8FFFF277D
%7D7DF852FFA85252FF7DF852A8FD07FFA852A87D7DF8277DF87DFFA827F8
%A8FF2752A87DF8A8FF5227FD05FF52277D27F827FFFF7D27A8A85227FFFF
%A827FF7D27FD09FF5227527D7D7DA87DF8A8FFFF7DA8FFFF52FD04F8A8FF
%5227FF52A8FFFFF8F8F852F827FFFF7D27F8F8F827FFFFFF277D5252FD09
%FF7DF8FFFFFFA8A8A8F87DFFFFA827A87D2727A852F852FF52F827F827FF
%52F87DFFFF2727A8FFF8277D7D27F8FFFFFF7D27F8A8FD0AFF2727A87DF8
%7DFF27F8277D27F87DA8F8275252F87DFF7DF8F8F827A87DF8275227F8F8
%F8A827F8527DF8F8A8FFFFFFF827FD0CFFA827277DFFFFA8F8F8F8527DFF
%A87D27F8F852FFFFFF52F852A8FFFF7DF8F8277DF852FF7D7D27F8277DFF
%7D7DFF277DFD37FFF8F8A8F8A8FD37FFF8F8F852FD38FF7D277DFD07FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: MomsTypewriter
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _MomsTypewriter MomsTypewriter
[/_MomsTypewriter/MomsTypewriter 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
1 Ap
0 O
0 0.84 0.9 0 k
0 R
0 0 0 1 K
800 Ar
2 J 0 j 7 w 2 M []0 d%AI3_Note:0 D
0 XR
195.9082 -31.6699 m
-33.0762 -31.6699 L
-33.0762 418.3311 L
195.9082 418.3311 L
195.9082 -31.6699 L
b/BBAccumRotation (-1.570796) XT
0 Ap
0.03 0.15 0.29 0 k
0 J 1 w 4 M-23.9824 410.1924 m
186.8145 410.1924 L
186.8145 -23.5313 L
-23.9824 -23.5313 L
-23.9824 410.1924 L
f/BBAccumRotation (-1.570796) XT
0.52 0.52 0.5 1 k
0 R
0.52 0.52 0.5 1 K
2 J 1.8 w 2 M15.5488 286.8887 m
14.3486 281.1885 13.3486 272.8887 16.5488 267.8887 C
43.0488 274.6885 23.5488 299.1885 26.5488 314.8887 C
23.3486 343.6885 30.3486 370.6885 43.5488 393.8887 C
47.8486 396.6885 52.0488 402.3887 57.5488 398.8887 C
80.3486 370.6885 85.3486 330.1885 76.5488 293.8887 C
76.3486 291.3887 76.5488 288.1885 79.5488 287.8887 C
82.8486 291.8887 88.3486 283.8887 89.5488 290.8887 C
90.0488 328.3887 93.5488 364.6885 113.5488 393.8887 C
116.3486 398.3887 120.8486 398.6885 124.5488 400.8887 C
133.8486 397.3887 137.8486 386.3887 141.5488 377.8887 C
152.8486 345.1885 138.8486 310.6885 130.5488 279.8887 C
137.3486 273.6885 144.5488 268.3887 152.5488 264.8887 C
154.0488 272.6885 154.0488 282.1885 152.5488 289.8887 C
153.5488 409.8887 L
157.5488 409.8887 L
155.5488 284.8887 L
158.3486 270.3887 153.0488 252.3887 165.5488 241.8887 C
172.3486 226.6885 174.3486 204.6885 167.5488 188.8887 C
164.0488 181.3887 162.8486 173.1885 156.5488 166.8887 C
157.8486 153.6885 152.8486 137.8887 164.5488 128.8887 C
169.3486 116.8877 171.5488 98.8877 160.5488 88.8877 C
161.0488 78.8877 164.5488 65.1875 157.5488 56.8877 C
157.5488 28.8877 L
161.5488 24.6875 172.0488 29.6875 171.5488 20.8877 C
171.8486 13.6875 171.8486 5.3877 167.5488 0.8877 C
161.3486 2.1875 158.8486 -6.3125 152.5488 -5.1123 C
143.0488 7.1875 127.8486 -3.3125 114.5488 -0.1123 C
84.5488 3.1875 54.5488 -2.3125 24.5488 0.8877 C
20.0488 -3.8125 13.8486 -7.1123 8.5488 -2.1123 C
6.3486 1.8877 1.0488 3.1875 -3.4512 3.8877 C
-4.9512 11.6875 -5.1514 21.1875 -1.4512 27.8877 C
2.8486 28.6875 9.5488 25.6875 10.5488 31.8877 C
9.5488 32.8877 L
9.5488 36.6875 9.5488 42.8877 9.5488 47.8877 C
11.3486 50.8877 10.3486 55.1875 10.5488 58.8877 C
9.0488 62.8877 4.0488 60.3877 3.5488 64.8877 C
4.0488 74.3877 8.0488 88.1875 -1.4512 94.8877 C
-4.6514 104.8877 -4.6514 118.6875 2.5488 126.8877 C
15.3486 134.1885 8.8486 149.1885 10.5488 160.8887 C
-5.4512 177.1885 -12.1514 198.3887 -7.4512 221.8887 C
-6.4512 241.1885 12.5488 254.1885 11.5488 272.8887 C
12.5488 273.8887 L
11.5488 274.8887 L
13.3486 319.3887 12.3486 366.1885 12.5488 409.8887 C
14.5488 409.8887 L
15.5488 286.8887 L
b/BBAccumRotation (-1.570796) XT
0.01 0.01 0 0 k
0.01 0.01 0 0 K
133.5488 386.8887 m
150.0488 354.3887 138.0488 313.3887 125.5488 282.8887 C
125.5488 277.8887 L
133.8486 269.3887 145.8486 266.1885 151.5488 255.8887 C
151.8486 233.8887 155.3486 215.8887 152.5488 193.8887 C
153.5488 192.8887 L
150.3486 180.8887 157.8486 162.6885 141.5488 157.8887 C
106.0488 141.1885 49.5488 136.6885 16.5488 161.8887 C
15.0488 173.6885 15.0488 187.1885 16.5488 198.8887 C
15.5488 199.8887 L
16.5488 200.8887 L
15.5488 201.8887 L
16.5488 202.8887 L
15.5488 203.8887 L
16.5488 204.8887 L
15.5488 205.8887 L
16.5488 206.8887 L
15.0488 216.3887 15.0488 227.3887 16.5488 236.8887 C
16.3486 239.8887 17.3486 246.1885 15.5488 249.8887 C
16.5488 250.8887 L
16.0488 253.1885 16.8486 257.3887 16.5488 260.8887 C
22.3486 269.6885 32.8486 271.1885 36.5488 280.8887 C
31.3486 307.3887 24.8486 339.3887 34.5488 365.8887 C
38.3486 376.1885 42.3486 387.3887 50.5488 394.8887 C
57.8486 395.6885 60.3486 387.3887 63.5488 382.8887 C
81.5488 355.6885 75.5488 318.1885 72.5488 285.8887 C
74.0488 283.8887 76.0488 282.8887 78.5488 282.8887 C
82.5488 284.1885 92.5488 279.6885 94.5488 286.8887 C
93.5488 325.8887 97.0488 363.1885 118.5488 392.8887 C
124.8486 400.8887 129.5488 391.1885 133.5488 386.8887 C
b/BBAccumRotation (-1.570796) XT
9.5488 169.8887 m
-4.6514 183.8887 -5.1514 207.8887 -1.4512 227.8887 C
1.5488 235.6885 3.8486 243.6885 8.5488 250.8887 C
10.5488 244.8887 L
9.5488 169.8887 L
b/BBAccumRotation (-1.570796) XT
165.5488 229.8887 m
169.5488 212.6885 167.5488 192.6885 159.5488 177.8887 C
157.8486 198.3887 158.8486 223.1885 158.5488 243.8887 C
162.3486 240.6885 163.3486 234.6885 165.5488 229.8887 C
b/BBAccumRotation (-1.570796) XT
0.52 0.52 0.5 1 k
0.52 0.52 0.5 1 K
34.5488 207.8887 m
37.3486 204.8887 33.8486 201.8887 33.5488 198.8887 C
32.0488 197.1885 29.5488 198.1885 27.5488 197.8887 C
24.3486 200.1885 25.3486 205.1885 26.5488 207.8887 C
28.3486 211.6885 32.8486 211.6885 34.5488 207.8887 C
b/BBAccumRotation (-1.570796) XT
133.5488 205.8887 m
132.3486 203.1885 133.0488 199.6885 129.5488 197.8887 C
126.8486 196.8887 125.3486 199.3887 123.5488 200.8887 C
122.8486 205.1885 124.8486 209.1885 127.5488 210.8887 C
131.3486 212.6885 133.0488 208.1885 133.5488 205.8887 C
b/BBAccumRotation (-1.570796) XT
97.5488 173.8887 m
96.0488 171.3887 92.0488 170.1885 89.5488 167.8887 C
94.5488 162.8887 L
94.0488 162.3887 93.3486 161.8887 93.5488 160.8887 C
89.3486 162.1885 84.3486 162.1885 80.5488 164.8887 C
74.8486 163.6885 69.5488 161.1885 63.5488 160.8887 C
63.3486 166.1885 71.8486 162.6885 71.5488 167.8887 C
68.8486 169.6885 64.3486 168.6885 63.5488 172.8887 C
69.5488 174.6885 75.5488 170.1885 81.5488 168.8887 C
87.0488 170.1885 91.8486 176.1885 97.5488 173.8887 C
b/BBAccumRotation (-1.570796) XT
0.03 0.15 0.29 0 k
0 J 1 w 4 M20.5488 150.8887 m
21.5488 148.3887 18.5488 147.6885 17.5488 145.8887 C
16.5488 145.3887 15.0488 146.8887 15.5488 147.8887 C
13.5488 151.6885 18.5488 155.3887 20.5488 150.8887 C
f/BBAccumRotation (-1.570796) XT
0 0.84 0.9 0 k
0 R
0 0.84 0.9 0 K
2 J 1.8 w 2 M146.5488 136.8887 m
135.8486 126.6875 133.8486 111.3877 136.5488 96.8877 C
139.3486 93.6875 140.8486 89.8877 144.5488 86.8877 C
159.3486 89.3877 149.8486 71.6875 152.5488 63.8877 C
150.8486 61.1875 145.8486 61.1875 142.5488 59.8877 C
100.0488 53.6875 57.3486 53.6875 16.5488 63.8877 C
18.0488 71.6875 12.3486 84.8877 23.5488 85.8877 C
31.5488 96.1875 31.8486 114.6875 25.5488 125.8877 C
24.5488 131.3887 14.8486 131.6885 17.5488 136.8887 C
26.5488 144.8887 L
36.3486 137.3887 46.5488 131.1885 58.5488 128.8887 C
59.5488 129.8887 L
62.3486 130.1885 68.0488 129.1885 71.5488 130.8887 C
68.5488 128.1875 68.3486 124.1875 68.5488 119.8877 C
71.5488 115.8877 75.5488 114.1875 80.5488 114.8877 C
84.3486 118.1875 89.5488 123.3877 84.5488 127.8877 C
82.0488 132.1885 77.8486 132.1885 73.5488 131.8887 C
76.5488 133.8887 79.0488 136.1885 82.5488 136.8887 C
90.8486 128.6875 103.3486 127.6875 114.5488 129.8887 C
122.0488 133.3887 130.0488 140.3887 134.5488 146.8887 C
139.5488 145.6885 142.5488 140.1885 146.5488 136.8887 C
b/BBAccumRotation (-1.570796) XT
68.5488 137.8887 m
69.0488 138.3887 69.5488 139.1885 70.5488 138.8887 C
69.0488 136.1885 65.0488 135.1885 61.5488 134.8887 C
53.5488 136.6885 44.8486 138.6885 39.5488 144.8887 C
48.5488 141.1885 58.8486 140.1885 68.5488 137.8887 C
b/BBAccumRotation (-1.570796) XT
123.5488 143.8887 m
117.0488 134.3887 104.8486 132.1885 93.5488 134.8887 C
91.5488 136.1885 89.0488 136.3887 87.5488 138.8887 C
88.5488 139.8887 L
89.5488 138.8887 L
101.5488 139.1885 112.3486 142.1885 123.5488 143.8887 C
b/BBAccumRotation (-1.570796) XT
0.01 0.01 0 0 k
0.01 0.01 0 0 K
162.5488 124.8877 m
162.8486 116.1875 166.3486 107.6875 163.5488 98.8877 C
160.5488 94.1875 154.8486 87.8877 148.5488 91.8877 C
138.0488 97.3877 140.5488 111.1875 141.5488 120.8877 C
143.5488 124.8877 145.0488 131.1885 150.5488 131.8887 C
156.3486 133.8887 160.0488 128.6875 162.5488 124.8877 C
b/BBAccumRotation (-1.570796) XT
22.5488 119.8877 m
22.5488 110.1875 27.8486 95.6875 17.5488 88.8877 C
14.3486 86.8877 9.5488 88.1875 6.5488 89.8877 C
0.3486 96.6875 1.8486 106.6875 1.5488 115.8877 C
3.5488 120.3877 4.5488 126.8877 10.5488 127.8877 C
15.5488 127.6875 21.5488 125.3877 22.5488 119.8877 C
b/BBAccumRotation (-1.570796) XT
0.03 0.1 1 0 k
0.03 0.1 1 0 K
80.5488 123.8877 m
80.0488 122.3877 79.8486 120.8877 78.5488 119.8877 C
76.5488 119.6875 74.8486 120.1875 73.5488 121.8877 C
73.8486 123.8877 72.8486 126.6875 75.5488 126.8877 C
78.0488 127.6875 80.0488 125.8877 80.5488 123.8877 C
b/BBAccumRotation (-1.570796) XT
0.01 0.01 0 0 k
0.01 0.01 0 0 K
79.5488 49.8877 m
83.5488 44.3877 80.0488 35.8877 82.5488 29.8877 C
79.8486 26.6875 74.0488 27.6875 70.5488 28.8877 C
53.5488 25.8877 41.0488 30.3877 23.5488 28.8877 C
19.8486 35.3877 21.8486 44.1875 25.5488 49.8877 C
30.5488 53.8877 L
46.3486 51.1875 63.3486 51.1875 79.5488 49.8877 C
b/BBAccumRotation (-1.570796) XT
142.5488 44.8877 m
143.8486 39.8877 144.8486 32.3877 141.5488 27.8877 C
88.5488 28.8877 L
89.3486 35.8877 87.3486 41.6875 86.5488 47.8877 C
88.5488 49.8877 L
104.8486 49.3877 120.5488 50.3877 135.5488 52.8877 C
142.5488 44.8877 L
b/BBAccumRotation (-1.570796) XT
0.03 0.15 0.29 0 k
0 J 1 w 4 M77.5488 22.8877 m
78.5488 21.8877 L
79.5488 22.8877 L
80.0488 21.6875 81.5488 21.8877 82.5488 21.8877 C
83.5488 22.8877 L
85.0488 22.8877 88.8486 22.8877 91.5488 22.8877 C
114.3486 21.3877 141.5488 21.3877 165.5488 22.8877 C
170.3486 17.8877 164.8486 12.1875 166.5488 5.8877 C
129.0488 4.1875 89.3486 5.1875 52.5488 4.8877 C
0.5488 6.8877 L
1.8486 12.6875 -2.6514 22.3877 4.5488 23.8877 C
29.5488 22.1875 53.3486 23.1875 77.5488 22.8877 C
f/BBAccumRotation (-1.570796) XT
151.5488 141.8887 m
147.5488 143.8887 144.5488 148.8887 140.5488 150.8887 C
142.5488 154.3887 147.3486 156.1885 150.5488 158.8887 C
151.5488 141.8887 L
f/BBAccumRotation (-1.570796) XT
0 To
1 0 0 1 -22.6895 -81.5684 0 Tp
0 Tv
TP
0 Tr
0 0 0 1 k
%_ 0 50 XQ
/_MomsTypewriter 48 45.9353 -11.3276 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
1 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
0 Ta
0 1 2 2 3 Th
0 Tq
240 Tg
0 0 Tl
0 Tc
0 Tw
(ecstasy) Tx 1 0 Tk
(\r) TX 
TO
/BBAccumRotation (-1.570796) XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
